
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d38  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d2  00800060  00000d38  00000dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 000000a0  00000000  00000000  0000117e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000128  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006a4  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000038c  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000069a  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c9  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 33       	cpi	r26, 0x32	; 50
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	{F_DA, Q}, {F_DA, Q}, {F_EA, Q}, {F_DA, Q},
	{F_CA, W}};



void main(){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB, 0);
  8a:	a7 e3       	ldi	r26, 0x37	; 55
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e7 e3       	ldi	r30, 0x37	; 55
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	81 60       	ori	r24, 0x01	; 1
  96:	8c 93       	st	X, r24
	ini_lcd();
  98:	0e 94 99 01 	call	0x332	; 0x332 <ini_lcd>
	clr_lcd();
  9c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <clr_lcd>
	for(;;){
	pos_lcd(0,0);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <pos_lcd>
	put_str_lcd("Press 1. Saria's...");
  a8:	88 ed       	ldi	r24, 0xD8	; 216
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	0e 94 55 02 	call	0x4aa	; 0x4aa <put_str_lcd>
	pos_lcd(1,0);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <pos_lcd>
	put_str_lcd("Press 2. Mary...");
  b8:	8c ee       	ldi	r24, 0xEC	; 236
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	0e 94 55 02 	call	0x4aa	; 0x4aa <put_str_lcd>
		if (get_key() == 16)
  c0:	0e 94 25 03 	call	0x64a	; 0x64a <get_key>
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	91 05       	cpc	r25, r1
  c8:	d9 f4       	brne	.+54     	; 0x100 <main+0x7e>
		{
			clr_lcd();
  ca:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <clr_lcd>
			pos_lcd(0,2);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <pos_lcd>
			put_str_lcd("Saria's Song");
  d6:	8d ef       	ldi	r24, 0xFD	; 253
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	0e 94 55 02 	call	0x4aa	; 0x4aa <put_str_lcd>
			pos_lcd(1, 0);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <pos_lcd>
			put_str_lcd("Press B to stop.");
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	0e 94 55 02 	call	0x4aa	; 0x4aa <put_str_lcd>
			play_song(saria, 85);
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	65 e5       	ldi	r22, 0x55	; 85
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 4d 04 	call	0x89a	; 0x89a <play_song>
			clr_lcd();
  fa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <clr_lcd>
  fe:	1f c0       	rjmp	.+62     	; 0x13e <main+0xbc>
		}
		else if (get_key() == 15)
 100:	0e 94 25 03 	call	0x64a	; 0x64a <get_key>
 104:	8f 30       	cpi	r24, 0x0F	; 15
 106:	91 05       	cpc	r25, r1
 108:	d1 f4       	brne	.+52     	; 0x13e <main+0xbc>
		{
			clr_lcd();
 10a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <clr_lcd>
			pos_lcd(0,2);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <pos_lcd>
			put_str_lcd("Mary Had A");
 116:	8b e1       	ldi	r24, 0x1B	; 27
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	0e 94 55 02 	call	0x4aa	; 0x4aa <put_str_lcd>
			pos_lcd(1, 2);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <pos_lcd>
			put_str_lcd("Little Lamb");
 126:	86 e2       	ldi	r24, 0x26	; 38
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	0e 94 55 02 	call	0x4aa	; 0x4aa <put_str_lcd>
			play_song(mary, 26);
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	6a e1       	ldi	r22, 0x1A	; 26
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 4d 04 	call	0x89a	; 0x89a <play_song>
			clr_lcd();
 13a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <clr_lcd>
		}	
		wait_avr(50);
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 af 00 	call	0x15e	; 0x15e <wait_avr>
 146:	ac cf       	rjmp	.-168    	; 0xa0 <main+0x1e>

00000148 <ini_avr>:
#include "avr.h"

void ini_avr(void)
{
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
  WDTCR = 15;
 150:	e1 e4       	ldi	r30, 0x41	; 65
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	80 83       	st	Z, r24
}
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <wait_avr>:


void wait_avr(unsigned short msec)
{
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	00 d0       	rcall	.+0      	; 0x164 <wait_avr+0x6>
 164:	0f 92       	push	r0
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
  TCCR0 = 2;
 16e:	e3 e5       	ldi	r30, 0x53	; 83
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 83       	st	Z, r24
 176:	15 c0       	rjmp	.+42     	; 0x1a2 <wait_avr+0x44>
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
 178:	e2 e5       	ldi	r30, 0x52	; 82
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	86 ef       	ldi	r24, 0xF6	; 246
 17e:	80 83       	st	Z, r24
    SET_BIT(TIFR, TOV0);
 180:	a8 e5       	ldi	r26, 0x58	; 88
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e8 e5       	ldi	r30, 0x58	; 88
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	8c 93       	st	X, r24
    WDR();
 18e:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
 190:	e8 e5       	ldi	r30, 0x58	; 88
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	88 2f       	mov	r24, r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	90 70       	andi	r25, 0x00	; 0
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	b9 f3       	breq	.-18     	; 0x190 <wait_avr+0x32>


void wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
 1a2:	1b 82       	std	Y+3, r1	; 0x03
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <wait_avr+0x52>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	8b 83       	std	Y+3, r24	; 0x03
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	88 23       	and	r24, r24
 1be:	e1 f6       	brne	.-72     	; 0x178 <wait_avr+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
 1c0:	e3 e5       	ldi	r30, 0x53	; 83
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	10 82       	st	Z, r1
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <input>:
  NOP();
}

static unsigned char
input(unsigned char rs)
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <input+0x6>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	88 23       	and	r24, r24
 1e2:	41 f0       	breq	.+16     	; 0x1f4 <input+0x22>
 1e4:	a8 e3       	ldi	r26, 0x38	; 56
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e8 e3       	ldi	r30, 0x38	; 56
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	8c 93       	st	X, r24
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <input+0x30>
 1f4:	a8 e3       	ldi	r26, 0x38	; 56
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e8 e3       	ldi	r30, 0x38	; 56
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8d 7f       	andi	r24, 0xFD	; 253
 200:	8c 93       	st	X, r24
  SET_BIT(PORT, RW_PIN);
 202:	a8 e3       	ldi	r26, 0x38	; 56
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e8 e3       	ldi	r30, 0x38	; 56
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	84 60       	ori	r24, 0x04	; 4
 20e:	8c 93       	st	X, r24
  get_data();
 210:	0e 94 2d 01 	call	0x25a	; 0x25a <get_data>
  SET_BIT(PORT, EN_PIN);
 214:	a8 e3       	ldi	r26, 0x38	; 56
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e8 e3       	ldi	r30, 0x38	; 56
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 60       	ori	r24, 0x08	; 8
 220:	8c 93       	st	X, r24
  sleep_700ns();
 222:	0e 94 23 01 	call	0x246	; 0x246 <sleep_700ns>
  d = get_data();
 226:	0e 94 2d 01 	call	0x25a	; 0x25a <get_data>
 22a:	89 83       	std	Y+1, r24	; 0x01
  CLR_BIT(PORT, EN_PIN);
 22c:	a8 e3       	ldi	r26, 0x38	; 56
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e8 e3       	ldi	r30, 0x38	; 56
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	87 7f       	andi	r24, 0xF7	; 247
 238:	8c 93       	st	X, r24
  return d;
 23a:	89 81       	ldd	r24, Y+1	; 0x01
}
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	cf 91       	pop	r28
 242:	df 91       	pop	r29
 244:	08 95       	ret

00000246 <sleep_700ns>:
  return PIND;
}

static inline void
sleep_700ns(void)
{
 246:	df 93       	push	r29
 248:	cf 93       	push	r28
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
  NOP();
 24e:	00 00       	nop
  NOP();
 250:	00 00       	nop
  NOP();
 252:	00 00       	nop
}
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	08 95       	ret

0000025a <get_data>:
  DDRD = 0xff;
}

static inline unsigned char
get_data(void)
{
 25a:	df 93       	push	r29
 25c:	cf 93       	push	r28
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
  DDRD = 0x00;
 262:	e1 e3       	ldi	r30, 0x31	; 49
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	10 82       	st	Z, r1
  return PIND;
 268:	e0 e3       	ldi	r30, 0x30	; 48
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
}
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	08 95       	ret

00000274 <output>:
  return d;
}

static void
output(unsigned char d, unsigned char rs)
{
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	00 d0       	rcall	.+0      	; 0x27a <output+0x6>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	6a 83       	std	Y+2, r22	; 0x02
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	88 23       	and	r24, r24
 286:	41 f0       	breq	.+16     	; 0x298 <output+0x24>
 288:	a8 e3       	ldi	r26, 0x38	; 56
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e8 e3       	ldi	r30, 0x38	; 56
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	82 60       	ori	r24, 0x02	; 2
 294:	8c 93       	st	X, r24
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <output+0x32>
 298:	a8 e3       	ldi	r26, 0x38	; 56
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e8 e3       	ldi	r30, 0x38	; 56
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	8c 93       	st	X, r24
  CLR_BIT(PORT, RW_PIN);
 2a6:	a8 e3       	ldi	r26, 0x38	; 56
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e8 e3       	ldi	r30, 0x38	; 56
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8b 7f       	andi	r24, 0xFB	; 251
 2b2:	8c 93       	st	X, r24
  set_data(d);
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <set_data>
  SET_BIT(PORT, EN_PIN);
 2ba:	a8 e3       	ldi	r26, 0x38	; 56
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e8 e3       	ldi	r30, 0x38	; 56
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	8c 93       	st	X, r24
  sleep_700ns();
 2c8:	0e 94 23 01 	call	0x246	; 0x246 <sleep_700ns>
  CLR_BIT(PORT, EN_PIN);
 2cc:	a8 e3       	ldi	r26, 0x38	; 56
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e8 e3       	ldi	r30, 0x38	; 56
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	8c 93       	st	X, r24
}
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	08 95       	ret

000002e4 <set_data>:
#define RW_PIN  2
#define EN_PIN  3

static inline void
set_data(unsigned char x)
{
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	0f 92       	push	r0
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	89 83       	std	Y+1, r24	; 0x01
  PORTD = x;
 2f0:	e2 e3       	ldi	r30, 0x32	; 50
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	80 83       	st	Z, r24
  DDRD = 0xff;
 2f8:	e1 e3       	ldi	r30, 0x31	; 49
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	80 83       	st	Z, r24
}
 300:	0f 90       	pop	r0
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	08 95       	ret

00000308 <write>:
  CLR_BIT(PORT, EN_PIN);
}

static void
write(unsigned char c, unsigned char rs)
{
 308:	df 93       	push	r29
 30a:	cf 93       	push	r28
 30c:	00 d0       	rcall	.+0      	; 0x30e <write+0x6>
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	6a 83       	std	Y+2, r22	; 0x02
  while (input(0) & 0x80);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <input>
 31c:	88 23       	and	r24, r24
 31e:	dc f3       	brlt	.-10     	; 0x316 <write+0xe>
  output(c, rs);
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	6a 81       	ldd	r22, Y+2	; 0x02
 324:	0e 94 3a 01 	call	0x274	; 0x274 <output>
}
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	cf 91       	pop	r28
 32e:	df 91       	pop	r29
 330:	08 95       	ret

00000332 <ini_lcd>:

void
ini_lcd(void)
{
 332:	df 93       	push	r29
 334:	cf 93       	push	r28
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(DDR, RS_PIN);
 33a:	a7 e3       	ldi	r26, 0x37	; 55
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e7 e3       	ldi	r30, 0x37	; 55
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	82 60       	ori	r24, 0x02	; 2
 346:	8c 93       	st	X, r24
  SET_BIT(DDR, RW_PIN);
 348:	a7 e3       	ldi	r26, 0x37	; 55
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e7 e3       	ldi	r30, 0x37	; 55
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	84 60       	ori	r24, 0x04	; 4
 354:	8c 93       	st	X, r24
  SET_BIT(DDR, EN_PIN);
 356:	a7 e3       	ldi	r26, 0x37	; 55
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e7 e3       	ldi	r30, 0x37	; 55
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	88 60       	ori	r24, 0x08	; 8
 362:	8c 93       	st	X, r24
  wait_avr(16);
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 af 00 	call	0x15e	; 0x15e <wait_avr>
  output(0x30, 0);
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	0e 94 3a 01 	call	0x274	; 0x274 <output>
  wait_avr(5);
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 af 00 	call	0x15e	; 0x15e <wait_avr>
  output(0x30, 0);
 37c:	80 e3       	ldi	r24, 0x30	; 48
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	0e 94 3a 01 	call	0x274	; 0x274 <output>
  wait_avr(1);
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 af 00 	call	0x15e	; 0x15e <wait_avr>
  write(0x3c, 0);
 38c:	8c e3       	ldi	r24, 0x3C	; 60
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 84 01 	call	0x308	; 0x308 <write>
  write(0x0c, 0);
 394:	8c e0       	ldi	r24, 0x0C	; 12
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	0e 94 84 01 	call	0x308	; 0x308 <write>
  write(0x06, 0);
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	0e 94 84 01 	call	0x308	; 0x308 <write>
  write(0x01, 0);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	0e 94 84 01 	call	0x308	; 0x308 <write>
}
 3ac:	cf 91       	pop	r28
 3ae:	df 91       	pop	r29
 3b0:	08 95       	ret

000003b2 <clr_lcd>:

void
clr_lcd(void)
{
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
  write(0x01, 0);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	0e 94 84 01 	call	0x308	; 0x308 <write>
}
 3c2:	cf 91       	pop	r28
 3c4:	df 91       	pop	r29
 3c6:	08 95       	ret

000003c8 <pos_lcd>:

void
pos_lcd(unsigned char r, unsigned char c)
{
 3c8:	df 93       	push	r29
 3ca:	cf 93       	push	r28
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <pos_lcd+0x6>
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <pos_lcd+0x8>
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	8a 83       	std	Y+2, r24	; 0x02
 3d6:	6b 83       	std	Y+3, r22	; 0x03
  unsigned char n = r * 40 + c;
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9c 01       	movw	r18, r24
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	c9 01       	movw	r24, r18
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	82 0f       	add	r24, r18
 3f8:	93 1f       	adc	r25, r19
 3fa:	98 2f       	mov	r25, r24
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	89 0f       	add	r24, r25
 400:	89 83       	std	Y+1, r24	; 0x01
  write(0x02, 0);
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	0e 94 84 01 	call	0x308	; 0x308 <write>
 40a:	04 c0       	rjmp	.+8      	; 0x414 <pos_lcd+0x4c>
  while (n--) {
    write(0x14, 0);
 40c:	84 e1       	ldi	r24, 0x14	; 20
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	0e 94 84 01 	call	0x308	; 0x308 <write>
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	8c 83       	std	Y+4, r24	; 0x04
 418:	8c 81       	ldd	r24, Y+4	; 0x04
 41a:	88 23       	and	r24, r24
 41c:	11 f0       	breq	.+4      	; 0x422 <pos_lcd+0x5a>
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	8c 83       	std	Y+4, r24	; 0x04
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	99 81       	ldd	r25, Y+1	; 0x01
 426:	91 50       	subi	r25, 0x01	; 1
 428:	99 83       	std	Y+1, r25	; 0x01
 42a:	88 23       	and	r24, r24
 42c:	79 f7       	brne	.-34     	; 0x40c <pos_lcd+0x44>
    write(0x14, 0);
  }
}
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	cf 91       	pop	r28
 438:	df 91       	pop	r29
 43a:	08 95       	ret

0000043c <put_lcd>:

void
put_lcd(char c)
{
 43c:	df 93       	push	r29
 43e:	cf 93       	push	r28
 440:	0f 92       	push	r0
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	89 83       	std	Y+1, r24	; 0x01
  write(c, 1);
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	0e 94 84 01 	call	0x308	; 0x308 <write>
}
 450:	0f 90       	pop	r0
 452:	cf 91       	pop	r28
 454:	df 91       	pop	r29
 456:	08 95       	ret

00000458 <put_const_str_lcd>:

void
put_const_str_lcd(const char *s)
{
 458:	df 93       	push	r29
 45a:	cf 93       	push	r28
 45c:	00 d0       	rcall	.+0      	; 0x45e <put_const_str_lcd+0x6>
 45e:	00 d0       	rcall	.+0      	; 0x460 <put_const_str_lcd+0x8>
 460:	00 d0       	rcall	.+0      	; 0x462 <put_const_str_lcd+0xa>
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	9e 83       	std	Y+6, r25	; 0x06
 468:	8d 83       	std	Y+5, r24	; 0x05
 46a:	04 c0       	rjmp	.+8      	; 0x474 <put_const_str_lcd+0x1c>
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
    write(c, 1);
 46c:	8c 81       	ldd	r24, Y+4	; 0x04
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	0e 94 84 01 	call	0x308	; 0x308 <write>

void
put_const_str_lcd(const char *s)
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
 474:	8d 81       	ldd	r24, Y+5	; 0x05
 476:	9e 81       	ldd	r25, Y+6	; 0x06
 478:	9b 83       	std	Y+3, r25	; 0x03
 47a:	8a 83       	std	Y+2, r24	; 0x02
 47c:	8d 81       	ldd	r24, Y+5	; 0x05
 47e:	9e 81       	ldd	r25, Y+6	; 0x06
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	9e 83       	std	Y+6, r25	; 0x06
 484:	8d 83       	std	Y+5, r24	; 0x05
 486:	ea 81       	ldd	r30, Y+2	; 0x02
 488:	fb 81       	ldd	r31, Y+3	; 0x03
 48a:	84 91       	lpm	r24, Z+
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	8c 83       	std	Y+4, r24	; 0x04
 492:	8c 81       	ldd	r24, Y+4	; 0x04
 494:	88 23       	and	r24, r24
 496:	51 f7       	brne	.-44     	; 0x46c <put_const_str_lcd+0x14>
    write(c, 1);
  }
}
 498:	26 96       	adiw	r28, 0x06	; 6
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <put_str_lcd>:

void
put_str_lcd(const char *s)
{
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <put_str_lcd+0x6>
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <put_str_lcd+0x8>
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	9b 83       	std	Y+3, r25	; 0x03
 4b8:	8a 83       	std	Y+2, r24	; 0x02
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <put_str_lcd+0x1a>
  char c;
  while ((c = *(s++)) != 0) {
    write(c, 1);
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	0e 94 84 01 	call	0x308	; 0x308 <write>

void
put_str_lcd(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 4c4:	ea 81       	ldd	r30, Y+2	; 0x02
 4c6:	fb 81       	ldd	r31, Y+3	; 0x03
 4c8:	80 81       	ld	r24, Z
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	8c 83       	std	Y+4, r24	; 0x04
 4d0:	8c 81       	ldd	r24, Y+4	; 0x04
 4d2:	88 23       	and	r24, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <put_str_lcd+0x30>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8c 83       	std	Y+4, r24	; 0x04
 4da:	8c 81       	ldd	r24, Y+4	; 0x04
 4dc:	2a 81       	ldd	r18, Y+2	; 0x02
 4de:	3b 81       	ldd	r19, Y+3	; 0x03
 4e0:	2f 5f       	subi	r18, 0xFF	; 255
 4e2:	3f 4f       	sbci	r19, 0xFF	; 255
 4e4:	3b 83       	std	Y+3, r19	; 0x03
 4e6:	2a 83       	std	Y+2, r18	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	41 f7       	brne	.-48     	; 0x4bc <put_str_lcd+0x12>
    write(c, 1);
  }
}
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <pressed>:
#include "avr.h"
#include "keypad.h"

unsigned char pressed(int l, int k){
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	29 97       	sbiw	r28, 0x09	; 9
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	9e 83       	std	Y+6, r25	; 0x06
 510:	8d 83       	std	Y+5, r24	; 0x05
 512:	78 87       	std	Y+8, r23	; 0x08
 514:	6f 83       	std	Y+7, r22	; 0x07
	for(int j = 0; j < 4; j++){
 516:	1c 82       	std	Y+4, r1	; 0x04
 518:	1b 82       	std	Y+3, r1	; 0x03
 51a:	26 c0       	rjmp	.+76     	; 0x568 <pressed+0x6e>
		CLR_BIT(DDRC, j); //input
 51c:	a4 e3       	ldi	r26, 0x34	; 52
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e4 e3       	ldi	r30, 0x34	; 52
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	28 2f       	mov	r18, r24
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0b 80       	ldd	r0, Y+3	; 0x03
 52e:	02 c0       	rjmp	.+4      	; 0x534 <pressed+0x3a>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <pressed+0x36>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	8c 93       	st	X, r24
		SET_BIT(PORTC, j); //initialized columns to 0
 53e:	a5 e3       	ldi	r26, 0x35	; 53
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e5 e3       	ldi	r30, 0x35	; 53
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	28 2f       	mov	r18, r24
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0b 80       	ldd	r0, Y+3	; 0x03
 550:	02 c0       	rjmp	.+4      	; 0x556 <pressed+0x5c>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <pressed+0x58>
 55a:	82 2b       	or	r24, r18
 55c:	8c 93       	st	X, r24
#include "avr.h"
#include "keypad.h"

unsigned char pressed(int l, int k){
	for(int j = 0; j < 4; j++){
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	9c 81       	ldd	r25, Y+4	; 0x04
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	9c 83       	std	Y+4, r25	; 0x04
 566:	8b 83       	std	Y+3, r24	; 0x03
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	9c 81       	ldd	r25, Y+4	; 0x04
 56c:	84 30       	cpi	r24, 0x04	; 4
 56e:	91 05       	cpc	r25, r1
 570:	ac f2       	brlt	.-86     	; 0x51c <pressed+0x22>
		CLR_BIT(DDRC, j); //input
		SET_BIT(PORTC, j); //initialized columns to 0
	}
	
	//Rows
	for(int i = 4; i < 8; i++){
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	9a 83       	std	Y+2, r25	; 0x02
 578:	89 83       	std	Y+1, r24	; 0x01
 57a:	25 c0       	rjmp	.+74     	; 0x5c6 <pressed+0xcc>
		SET_BIT(DDRC, i); //output
 57c:	a4 e3       	ldi	r26, 0x34	; 52
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e4 e3       	ldi	r30, 0x34	; 52
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	28 2f       	mov	r18, r24
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	09 80       	ldd	r0, Y+1	; 0x01
 58e:	02 c0       	rjmp	.+4      	; 0x594 <pressed+0x9a>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <pressed+0x96>
 598:	82 2b       	or	r24, r18
 59a:	8c 93       	st	X, r24
		SET_BIT(PORTC, i);
 59c:	a5 e3       	ldi	r26, 0x35	; 53
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e5 e3       	ldi	r30, 0x35	; 53
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	28 2f       	mov	r18, r24
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	09 80       	ldd	r0, Y+1	; 0x01
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <pressed+0xba>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <pressed+0xb6>
 5b8:	82 2b       	or	r24, r18
 5ba:	8c 93       	st	X, r24
		CLR_BIT(DDRC, j); //input
		SET_BIT(PORTC, j); //initialized columns to 0
	}
	
	//Rows
	for(int i = 4; i < 8; i++){
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	9a 81       	ldd	r25, Y+2	; 0x02
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	9a 83       	std	Y+2, r25	; 0x02
 5c4:	89 83       	std	Y+1, r24	; 0x01
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ca:	88 30       	cpi	r24, 0x08	; 8
 5cc:	91 05       	cpc	r25, r1
 5ce:	b4 f2       	brlt	.-84     	; 0x57c <pressed+0x82>
		SET_BIT(DDRC, i); //output
		SET_BIT(PORTC, i);
	}
	
	CLR_BIT(PORTC, k); //set row k to low
 5d0:	a5 e3       	ldi	r26, 0x35	; 53
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	e5 e3       	ldi	r30, 0x35	; 53
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	28 2f       	mov	r18, r24
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0f 80       	ldd	r0, Y+7	; 0x07
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <pressed+0xee>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <pressed+0xea>
 5ec:	80 95       	com	r24
 5ee:	82 23       	and	r24, r18
 5f0:	8c 93       	st	X, r24
	
	if(GET_BIT(PINC, l) || GET_BIT(PINC, k)){ 
 5f2:	e3 e3       	ldi	r30, 0x33	; 51
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	88 2f       	mov	r24, r24
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0d 80       	ldd	r0, Y+5	; 0x05
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <pressed+0x10a>
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <pressed+0x106>
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	90 70       	andi	r25, 0x00	; 0
 60c:	88 23       	and	r24, r24
 60e:	79 f4       	brne	.+30     	; 0x62e <pressed+0x134>
 610:	e3 e3       	ldi	r30, 0x33	; 51
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0f 80       	ldd	r0, Y+7	; 0x07
 61c:	02 c0       	rjmp	.+4      	; 0x622 <pressed+0x128>
 61e:	95 95       	asr	r25
 620:	87 95       	ror	r24
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <pressed+0x124>
 626:	81 70       	andi	r24, 0x01	; 1
 628:	90 70       	andi	r25, 0x00	; 0
 62a:	88 23       	and	r24, r24
 62c:	11 f0       	breq	.+4      	; 0x632 <pressed+0x138>
		return 0; //not pressed
 62e:	19 86       	std	Y+9, r1	; 0x09
 630:	02 c0       	rjmp	.+4      	; 0x636 <pressed+0x13c>
	}
	else{
		return 1; //pressed
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	89 87       	std	Y+9, r24	; 0x09
 636:	89 85       	ldd	r24, Y+9	; 0x09
	}
	
}
 638:	29 96       	adiw	r28, 0x09	; 9
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	cf 91       	pop	r28
 646:	df 91       	pop	r29
 648:	08 95       	ret

0000064a <get_key>:

int get_key(void){
 64a:	df 93       	push	r29
 64c:	cf 93       	push	r28
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	28 97       	sbiw	r28, 0x08	; 8
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
	int i;
	int j;
	int k = 0;
 65e:	1a 82       	std	Y+2, r1	; 0x02
 660:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < 4; i++) //row
 662:	1e 82       	std	Y+6, r1	; 0x06
 664:	1d 82       	std	Y+5, r1	; 0x05
 666:	31 c0       	rjmp	.+98     	; 0x6ca <get_key+0x80>
	{
		k = i + 4;
 668:	8d 81       	ldd	r24, Y+5	; 0x05
 66a:	9e 81       	ldd	r25, Y+6	; 0x06
 66c:	04 96       	adiw	r24, 0x04	; 4
 66e:	9a 83       	std	Y+2, r25	; 0x02
 670:	89 83       	std	Y+1, r24	; 0x01
		
		for(j = 0; j < 4; j++){ //column
 672:	1c 82       	std	Y+4, r1	; 0x04
 674:	1b 82       	std	Y+3, r1	; 0x03
 676:	1f c0       	rjmp	.+62     	; 0x6b6 <get_key+0x6c>
	
			if(pressed(j,k)){
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	9c 81       	ldd	r25, Y+4	; 0x04
 67c:	29 81       	ldd	r18, Y+1	; 0x01
 67e:	3a 81       	ldd	r19, Y+2	; 0x02
 680:	b9 01       	movw	r22, r18
 682:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pressed>
 686:	88 23       	and	r24, r24
 688:	89 f0       	breq	.+34     	; 0x6ac <get_key+0x62>
				return (i * 4) + j + 1;
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	9c 01       	movw	r18, r24
 690:	22 0f       	add	r18, r18
 692:	33 1f       	adc	r19, r19
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	9c 81       	ldd	r25, Y+4	; 0x04
 69c:	82 0f       	add	r24, r18
 69e:	93 1f       	adc	r25, r19
 6a0:	9c 01       	movw	r18, r24
 6a2:	2f 5f       	subi	r18, 0xFF	; 255
 6a4:	3f 4f       	sbci	r19, 0xFF	; 255
 6a6:	38 87       	std	Y+8, r19	; 0x08
 6a8:	2f 83       	std	Y+7, r18	; 0x07
 6aa:	16 c0       	rjmp	.+44     	; 0x6d8 <get_key+0x8e>
	int k = 0;
	for(i = 0; i < 4; i++) //row
	{
		k = i + 4;
		
		for(j = 0; j < 4; j++){ //column
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	9c 81       	ldd	r25, Y+4	; 0x04
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	9c 83       	std	Y+4, r25	; 0x04
 6b4:	8b 83       	std	Y+3, r24	; 0x03
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	84 30       	cpi	r24, 0x04	; 4
 6bc:	91 05       	cpc	r25, r1
 6be:	e4 f2       	brlt	.-72     	; 0x678 <get_key+0x2e>

int get_key(void){
	int i;
	int j;
	int k = 0;
	for(i = 0; i < 4; i++) //row
 6c0:	8d 81       	ldd	r24, Y+5	; 0x05
 6c2:	9e 81       	ldd	r25, Y+6	; 0x06
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	9e 83       	std	Y+6, r25	; 0x06
 6c8:	8d 83       	std	Y+5, r24	; 0x05
 6ca:	8d 81       	ldd	r24, Y+5	; 0x05
 6cc:	9e 81       	ldd	r25, Y+6	; 0x06
 6ce:	84 30       	cpi	r24, 0x04	; 4
 6d0:	91 05       	cpc	r25, r1
 6d2:	54 f2       	brlt	.-108    	; 0x668 <get_key+0x1e>
			if(pressed(j,k)){
				return (i * 4) + j + 1;
			}
		}
	}
	return 0;
 6d4:	18 86       	std	Y+8, r1	; 0x08
 6d6:	1f 82       	std	Y+7, r1	; 0x07
 6d8:	8f 81       	ldd	r24, Y+7	; 0x07
 6da:	98 85       	ldd	r25, Y+8	; 0x08
 6dc:	28 96       	adiw	r28, 0x08	; 8
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <play_note>:
#include "musicNote.h"
#include "lcd.h"
#include "keypad.h"

void play_note(double freq, long dur)
{
 6ee:	ef 92       	push	r14
 6f0:	ff 92       	push	r15
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	df 93       	push	r29
 6f8:	cf 93       	push	r28
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
 6fe:	62 97       	sbiw	r28, 0x12	; 18
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	6b 87       	std	Y+11, r22	; 0x0b
 70c:	7c 87       	std	Y+12, r23	; 0x0c
 70e:	8d 87       	std	Y+13, r24	; 0x0d
 710:	9e 87       	std	Y+14, r25	; 0x0e
 712:	2f 87       	std	Y+15, r18	; 0x0f
 714:	38 8b       	std	Y+16, r19	; 0x10
 716:	49 8b       	std	Y+17, r20	; 0x11
 718:	5a 8b       	std	Y+18, r21	; 0x12
	double delay = find_delay(freq);
 71a:	8b 85       	ldd	r24, Y+11	; 0x0b
 71c:	9c 85       	ldd	r25, Y+12	; 0x0c
 71e:	ad 85       	ldd	r26, Y+13	; 0x0d
 720:	be 85       	ldd	r27, Y+14	; 0x0e
 722:	bc 01       	movw	r22, r24
 724:	cd 01       	movw	r24, r26
 726:	0e 94 06 04 	call	0x80c	; 0x80c <find_delay>
 72a:	dc 01       	movw	r26, r24
 72c:	cb 01       	movw	r24, r22
 72e:	8f 83       	std	Y+7, r24	; 0x07
 730:	98 87       	std	Y+8, r25	; 0x08
 732:	a9 87       	std	Y+9, r26	; 0x09
 734:	ba 87       	std	Y+10, r27	; 0x0a
	long duration = dur/(2.00*delay);
 736:	6f 85       	ldd	r22, Y+15	; 0x0f
 738:	78 89       	ldd	r23, Y+16	; 0x10
 73a:	89 89       	ldd	r24, Y+17	; 0x11
 73c:	9a 89       	ldd	r25, Y+18	; 0x12
 73e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 742:	7b 01       	movw	r14, r22
 744:	8c 01       	movw	r16, r24
 746:	2f 81       	ldd	r18, Y+7	; 0x07
 748:	38 85       	ldd	r19, Y+8	; 0x08
 74a:	49 85       	ldd	r20, Y+9	; 0x09
 74c:	5a 85       	ldd	r21, Y+10	; 0x0a
 74e:	ca 01       	movw	r24, r20
 750:	b9 01       	movw	r22, r18
 752:	0e 94 ac 04 	call	0x958	; 0x958 <__addsf3>
 756:	dc 01       	movw	r26, r24
 758:	cb 01       	movw	r24, r22
 75a:	9c 01       	movw	r18, r24
 75c:	ad 01       	movw	r20, r26
 75e:	c8 01       	movw	r24, r16
 760:	b7 01       	movw	r22, r14
 762:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 766:	dc 01       	movw	r26, r24
 768:	cb 01       	movw	r24, r22
 76a:	bc 01       	movw	r22, r24
 76c:	cd 01       	movw	r24, r26
 76e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixsfsi>
 772:	dc 01       	movw	r26, r24
 774:	cb 01       	movw	r24, r22
 776:	8b 83       	std	Y+3, r24	; 0x03
 778:	9c 83       	std	Y+4, r25	; 0x04
 77a:	ad 83       	std	Y+5, r26	; 0x05
 77c:	be 83       	std	Y+6, r27	; 0x06
	int i;
	for(i = 0; i < duration; i++)
 77e:	1a 82       	std	Y+2, r1	; 0x02
 780:	19 82       	std	Y+1, r1	; 0x01
 782:	27 c0       	rjmp	.+78     	; 0x7d2 <play_note+0xe4>
	{
		SET_BIT(PORTB, 0);
 784:	a8 e3       	ldi	r26, 0x38	; 56
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	e8 e3       	ldi	r30, 0x38	; 56
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	81 60       	ori	r24, 0x01	; 1
 790:	8c 93       	st	X, r24
		wait_avr(delay);
 792:	6f 81       	ldd	r22, Y+7	; 0x07
 794:	78 85       	ldd	r23, Y+8	; 0x08
 796:	89 85       	ldd	r24, Y+9	; 0x09
 798:	9a 85       	ldd	r25, Y+10	; 0x0a
 79a:	0e 94 7d 05 	call	0xafa	; 0xafa <__fixunssfsi>
 79e:	dc 01       	movw	r26, r24
 7a0:	cb 01       	movw	r24, r22
 7a2:	0e 94 af 00 	call	0x15e	; 0x15e <wait_avr>
		CLR_BIT(PORTB, 0);
 7a6:	a8 e3       	ldi	r26, 0x38	; 56
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	e8 e3       	ldi	r30, 0x38	; 56
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	8e 7f       	andi	r24, 0xFE	; 254
 7b2:	8c 93       	st	X, r24
		wait_avr(delay);
 7b4:	6f 81       	ldd	r22, Y+7	; 0x07
 7b6:	78 85       	ldd	r23, Y+8	; 0x08
 7b8:	89 85       	ldd	r24, Y+9	; 0x09
 7ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 7bc:	0e 94 7d 05 	call	0xafa	; 0xafa <__fixunssfsi>
 7c0:	dc 01       	movw	r26, r24
 7c2:	cb 01       	movw	r24, r22
 7c4:	0e 94 af 00 	call	0x15e	; 0x15e <wait_avr>
void play_note(double freq, long dur)
{
	double delay = find_delay(freq);
	long duration = dur/(2.00*delay);
	int i;
	for(i = 0; i < duration; i++)
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	9a 81       	ldd	r25, Y+2	; 0x02
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	9a 83       	std	Y+2, r25	; 0x02
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	89 81       	ldd	r24, Y+1	; 0x01
 7d4:	9a 81       	ldd	r25, Y+2	; 0x02
 7d6:	9c 01       	movw	r18, r24
 7d8:	44 27       	eor	r20, r20
 7da:	37 fd       	sbrc	r19, 7
 7dc:	40 95       	com	r20
 7de:	54 2f       	mov	r21, r20
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	9c 81       	ldd	r25, Y+4	; 0x04
 7e4:	ad 81       	ldd	r26, Y+5	; 0x05
 7e6:	be 81       	ldd	r27, Y+6	; 0x06
 7e8:	28 17       	cp	r18, r24
 7ea:	39 07       	cpc	r19, r25
 7ec:	4a 07       	cpc	r20, r26
 7ee:	5b 07       	cpc	r21, r27
 7f0:	4c f2       	brlt	.-110    	; 0x784 <play_note+0x96>
		SET_BIT(PORTB, 0);
		wait_avr(delay);
		CLR_BIT(PORTB, 0);
		wait_avr(delay);
	}
}
 7f2:	62 96       	adiw	r28, 0x12	; 18
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	f8 94       	cli
 7f8:	de bf       	out	0x3e, r29	; 62
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	cd bf       	out	0x3d, r28	; 61
 7fe:	cf 91       	pop	r28
 800:	df 91       	pop	r29
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	08 95       	ret

0000080c <find_delay>:

double find_delay(double freq)
{
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
 814:	2c 97       	sbiw	r28, 0x0c	; 12
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	f8 94       	cli
 81a:	de bf       	out	0x3e, r29	; 62
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	cd bf       	out	0x3d, r28	; 61
 820:	69 87       	std	Y+9, r22	; 0x09
 822:	7a 87       	std	Y+10, r23	; 0x0a
 824:	8b 87       	std	Y+11, r24	; 0x0b
 826:	9c 87       	std	Y+12, r25	; 0x0c
	double period = 1.00/freq;
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	80 e8       	ldi	r24, 0x80	; 128
 82e:	9f e3       	ldi	r25, 0x3F	; 63
 830:	29 85       	ldd	r18, Y+9	; 0x09
 832:	3a 85       	ldd	r19, Y+10	; 0x0a
 834:	4b 85       	ldd	r20, Y+11	; 0x0b
 836:	5c 85       	ldd	r21, Y+12	; 0x0c
 838:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 83c:	dc 01       	movw	r26, r24
 83e:	cb 01       	movw	r24, r22
 840:	8d 83       	std	Y+5, r24	; 0x05
 842:	9e 83       	std	Y+6, r25	; 0x06
 844:	af 83       	std	Y+7, r26	; 0x07
 846:	b8 87       	std	Y+8, r27	; 0x08
	double delay = (period/2.00) * 10000;
 848:	6d 81       	ldd	r22, Y+5	; 0x05
 84a:	7e 81       	ldd	r23, Y+6	; 0x06
 84c:	8f 81       	ldd	r24, Y+7	; 0x07
 84e:	98 85       	ldd	r25, Y+8	; 0x08
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	50 e4       	ldi	r21, 0x40	; 64
 858:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 85c:	dc 01       	movw	r26, r24
 85e:	cb 01       	movw	r24, r22
 860:	bc 01       	movw	r22, r24
 862:	cd 01       	movw	r24, r26
 864:	20 e0       	ldi	r18, 0x00	; 0
 866:	30 e4       	ldi	r19, 0x40	; 64
 868:	4c e1       	ldi	r20, 0x1C	; 28
 86a:	56 e4       	ldi	r21, 0x46	; 70
 86c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 870:	dc 01       	movw	r26, r24
 872:	cb 01       	movw	r24, r22
 874:	89 83       	std	Y+1, r24	; 0x01
 876:	9a 83       	std	Y+2, r25	; 0x02
 878:	ab 83       	std	Y+3, r26	; 0x03
 87a:	bc 83       	std	Y+4, r27	; 0x04
	return delay;
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	9a 81       	ldd	r25, Y+2	; 0x02
 880:	ab 81       	ldd	r26, Y+3	; 0x03
 882:	bc 81       	ldd	r27, Y+4	; 0x04
}
 884:	bc 01       	movw	r22, r24
 886:	cd 01       	movw	r24, r26
 888:	2c 96       	adiw	r28, 0x0c	; 12
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	de bf       	out	0x3e, r29	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	cd bf       	out	0x3d, r28	; 61
 894:	cf 91       	pop	r28
 896:	df 91       	pop	r29
 898:	08 95       	ret

0000089a <play_song>:

void play_song(const music_notes *song, int num_notes)
{
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	df 93       	push	r29
 8a4:	cf 93       	push	r28
 8a6:	00 d0       	rcall	.+0      	; 0x8a8 <play_song+0xe>
 8a8:	00 d0       	rcall	.+0      	; 0x8aa <play_song+0x10>
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <play_song+0x12>
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
 8b0:	9c 83       	std	Y+4, r25	; 0x04
 8b2:	8b 83       	std	Y+3, r24	; 0x03
 8b4:	7e 83       	std	Y+6, r23	; 0x06
 8b6:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	for(i = 0; i < num_notes; i++)
 8b8:	1a 82       	std	Y+2, r1	; 0x02
 8ba:	19 82       	std	Y+1, r1	; 0x01
 8bc:	38 c0       	rjmp	.+112    	; 0x92e <play_song+0x94>
	{
		play_note(song[i].frequency,song[i].duration);
 8be:	89 81       	ldd	r24, Y+1	; 0x01
 8c0:	9a 81       	ldd	r25, Y+2	; 0x02
 8c2:	9c 01       	movw	r18, r24
 8c4:	22 0f       	add	r18, r18
 8c6:	33 1f       	adc	r19, r19
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	22 0f       	add	r18, r18
 8ce:	33 1f       	adc	r19, r19
 8d0:	8b 81       	ldd	r24, Y+3	; 0x03
 8d2:	9c 81       	ldd	r25, Y+4	; 0x04
 8d4:	fc 01       	movw	r30, r24
 8d6:	e2 0f       	add	r30, r18
 8d8:	f3 1f       	adc	r31, r19
 8da:	e0 80       	ld	r14, Z
 8dc:	f1 80       	ldd	r15, Z+1	; 0x01
 8de:	02 81       	ldd	r16, Z+2	; 0x02
 8e0:	13 81       	ldd	r17, Z+3	; 0x03
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	9a 81       	ldd	r25, Y+2	; 0x02
 8e6:	9c 01       	movw	r18, r24
 8e8:	22 0f       	add	r18, r18
 8ea:	33 1f       	adc	r19, r19
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	22 0f       	add	r18, r18
 8f2:	33 1f       	adc	r19, r19
 8f4:	8b 81       	ldd	r24, Y+3	; 0x03
 8f6:	9c 81       	ldd	r25, Y+4	; 0x04
 8f8:	fc 01       	movw	r30, r24
 8fa:	e2 0f       	add	r30, r18
 8fc:	f3 1f       	adc	r31, r19
 8fe:	24 81       	ldd	r18, Z+4	; 0x04
 900:	35 81       	ldd	r19, Z+5	; 0x05
 902:	46 81       	ldd	r20, Z+6	; 0x06
 904:	57 81       	ldd	r21, Z+7	; 0x07
 906:	c8 01       	movw	r24, r16
 908:	b7 01       	movw	r22, r14
 90a:	0e 94 77 03 	call	0x6ee	; 0x6ee <play_note>
		if (get_key() == 9)
 90e:	0e 94 25 03 	call	0x64a	; 0x64a <get_key>
 912:	89 30       	cpi	r24, 0x09	; 9
 914:	91 05       	cpc	r25, r1
 916:	31 f4       	brne	.+12     	; 0x924 <play_song+0x8a>
		{
			i = num_notes;
 918:	8d 81       	ldd	r24, Y+5	; 0x05
 91a:	9e 81       	ldd	r25, Y+6	; 0x06
 91c:	9a 83       	std	Y+2, r25	; 0x02
 91e:	89 83       	std	Y+1, r24	; 0x01
			clr_lcd();
 920:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <clr_lcd>
}

void play_song(const music_notes *song, int num_notes)
{
	int i;
	for(i = 0; i < num_notes; i++)
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	9a 81       	ldd	r25, Y+2	; 0x02
 928:	01 96       	adiw	r24, 0x01	; 1
 92a:	9a 83       	std	Y+2, r25	; 0x02
 92c:	89 83       	std	Y+1, r24	; 0x01
 92e:	29 81       	ldd	r18, Y+1	; 0x01
 930:	3a 81       	ldd	r19, Y+2	; 0x02
 932:	8d 81       	ldd	r24, Y+5	; 0x05
 934:	9e 81       	ldd	r25, Y+6	; 0x06
 936:	28 17       	cp	r18, r24
 938:	39 07       	cpc	r19, r25
 93a:	0c f2       	brlt	.-126    	; 0x8be <play_song+0x24>
			i = num_notes;
			clr_lcd();
		}
	}
	
}
 93c:	26 96       	adiw	r28, 0x06	; 6
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	f8 94       	cli
 942:	de bf       	out	0x3e, r29	; 62
 944:	0f be       	out	0x3f, r0	; 63
 946:	cd bf       	out	0x3d, r28	; 61
 948:	cf 91       	pop	r28
 94a:	df 91       	pop	r29
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	08 95       	ret

00000956 <__subsf3>:
 956:	50 58       	subi	r21, 0x80	; 128

00000958 <__addsf3>:
 958:	bb 27       	eor	r27, r27
 95a:	aa 27       	eor	r26, r26
 95c:	0e d0       	rcall	.+28     	; 0x97a <__addsf3x>
 95e:	4d c1       	rjmp	.+666    	; 0xbfa <__fp_round>
 960:	3e d1       	rcall	.+636    	; 0xbde <__fp_pscA>
 962:	30 f0       	brcs	.+12     	; 0x970 <__addsf3+0x18>
 964:	43 d1       	rcall	.+646    	; 0xbec <__fp_pscB>
 966:	20 f0       	brcs	.+8      	; 0x970 <__addsf3+0x18>
 968:	31 f4       	brne	.+12     	; 0x976 <__addsf3+0x1e>
 96a:	9f 3f       	cpi	r25, 0xFF	; 255
 96c:	11 f4       	brne	.+4      	; 0x972 <__addsf3+0x1a>
 96e:	1e f4       	brtc	.+6      	; 0x976 <__addsf3+0x1e>
 970:	33 c1       	rjmp	.+614    	; 0xbd8 <__fp_nan>
 972:	0e f4       	brtc	.+2      	; 0x976 <__addsf3+0x1e>
 974:	e0 95       	com	r30
 976:	e7 fb       	bst	r30, 7
 978:	29 c1       	rjmp	.+594    	; 0xbcc <__fp_inf>

0000097a <__addsf3x>:
 97a:	e9 2f       	mov	r30, r25
 97c:	4f d1       	rcall	.+670    	; 0xc1c <__fp_split3>
 97e:	80 f3       	brcs	.-32     	; 0x960 <__addsf3+0x8>
 980:	ba 17       	cp	r27, r26
 982:	62 07       	cpc	r22, r18
 984:	73 07       	cpc	r23, r19
 986:	84 07       	cpc	r24, r20
 988:	95 07       	cpc	r25, r21
 98a:	18 f0       	brcs	.+6      	; 0x992 <__addsf3x+0x18>
 98c:	71 f4       	brne	.+28     	; 0x9aa <__addsf3x+0x30>
 98e:	9e f5       	brtc	.+102    	; 0x9f6 <__addsf3x+0x7c>
 990:	67 c1       	rjmp	.+718    	; 0xc60 <__fp_zero>
 992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3x+0x1c>
 994:	e0 95       	com	r30
 996:	0b 2e       	mov	r0, r27
 998:	ba 2f       	mov	r27, r26
 99a:	a0 2d       	mov	r26, r0
 99c:	0b 01       	movw	r0, r22
 99e:	b9 01       	movw	r22, r18
 9a0:	90 01       	movw	r18, r0
 9a2:	0c 01       	movw	r0, r24
 9a4:	ca 01       	movw	r24, r20
 9a6:	a0 01       	movw	r20, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	ff 27       	eor	r31, r31
 9ac:	59 1b       	sub	r21, r25
 9ae:	99 f0       	breq	.+38     	; 0x9d6 <__addsf3x+0x5c>
 9b0:	59 3f       	cpi	r21, 0xF9	; 249
 9b2:	50 f4       	brcc	.+20     	; 0x9c8 <__addsf3x+0x4e>
 9b4:	50 3e       	cpi	r21, 0xE0	; 224
 9b6:	68 f1       	brcs	.+90     	; 0xa12 <__addsf3x+0x98>
 9b8:	1a 16       	cp	r1, r26
 9ba:	f0 40       	sbci	r31, 0x00	; 0
 9bc:	a2 2f       	mov	r26, r18
 9be:	23 2f       	mov	r18, r19
 9c0:	34 2f       	mov	r19, r20
 9c2:	44 27       	eor	r20, r20
 9c4:	58 5f       	subi	r21, 0xF8	; 248
 9c6:	f3 cf       	rjmp	.-26     	; 0x9ae <__addsf3x+0x34>
 9c8:	46 95       	lsr	r20
 9ca:	37 95       	ror	r19
 9cc:	27 95       	ror	r18
 9ce:	a7 95       	ror	r26
 9d0:	f0 40       	sbci	r31, 0x00	; 0
 9d2:	53 95       	inc	r21
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__addsf3x+0x4e>
 9d6:	7e f4       	brtc	.+30     	; 0x9f6 <__addsf3x+0x7c>
 9d8:	1f 16       	cp	r1, r31
 9da:	ba 0b       	sbc	r27, r26
 9dc:	62 0b       	sbc	r22, r18
 9de:	73 0b       	sbc	r23, r19
 9e0:	84 0b       	sbc	r24, r20
 9e2:	ba f0       	brmi	.+46     	; 0xa12 <__addsf3x+0x98>
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	a1 f0       	breq	.+40     	; 0xa10 <__addsf3x+0x96>
 9e8:	ff 0f       	add	r31, r31
 9ea:	bb 1f       	adc	r27, r27
 9ec:	66 1f       	adc	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	c2 f7       	brpl	.-16     	; 0x9e4 <__addsf3x+0x6a>
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <__addsf3x+0x98>
 9f6:	ba 0f       	add	r27, r26
 9f8:	62 1f       	adc	r22, r18
 9fa:	73 1f       	adc	r23, r19
 9fc:	84 1f       	adc	r24, r20
 9fe:	48 f4       	brcc	.+18     	; 0xa12 <__addsf3x+0x98>
 a00:	87 95       	ror	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	9e 3f       	cpi	r25, 0xFE	; 254
 a0c:	08 f0       	brcs	.+2      	; 0xa10 <__addsf3x+0x96>
 a0e:	b3 cf       	rjmp	.-154    	; 0x976 <__addsf3+0x1e>
 a10:	93 95       	inc	r25
 a12:	88 0f       	add	r24, r24
 a14:	08 f0       	brcs	.+2      	; 0xa18 <__addsf3x+0x9e>
 a16:	99 27       	eor	r25, r25
 a18:	ee 0f       	add	r30, r30
 a1a:	97 95       	ror	r25
 a1c:	87 95       	ror	r24
 a1e:	08 95       	ret

00000a20 <__divsf3>:
 a20:	0c d0       	rcall	.+24     	; 0xa3a <__divsf3x>
 a22:	eb c0       	rjmp	.+470    	; 0xbfa <__fp_round>
 a24:	e3 d0       	rcall	.+454    	; 0xbec <__fp_pscB>
 a26:	40 f0       	brcs	.+16     	; 0xa38 <__divsf3+0x18>
 a28:	da d0       	rcall	.+436    	; 0xbde <__fp_pscA>
 a2a:	30 f0       	brcs	.+12     	; 0xa38 <__divsf3+0x18>
 a2c:	21 f4       	brne	.+8      	; 0xa36 <__divsf3+0x16>
 a2e:	5f 3f       	cpi	r21, 0xFF	; 255
 a30:	19 f0       	breq	.+6      	; 0xa38 <__divsf3+0x18>
 a32:	cc c0       	rjmp	.+408    	; 0xbcc <__fp_inf>
 a34:	51 11       	cpse	r21, r1
 a36:	15 c1       	rjmp	.+554    	; 0xc62 <__fp_szero>
 a38:	cf c0       	rjmp	.+414    	; 0xbd8 <__fp_nan>

00000a3a <__divsf3x>:
 a3a:	f0 d0       	rcall	.+480    	; 0xc1c <__fp_split3>
 a3c:	98 f3       	brcs	.-26     	; 0xa24 <__divsf3+0x4>

00000a3e <__divsf3_pse>:
 a3e:	99 23       	and	r25, r25
 a40:	c9 f3       	breq	.-14     	; 0xa34 <__divsf3+0x14>
 a42:	55 23       	and	r21, r21
 a44:	b1 f3       	breq	.-20     	; 0xa32 <__divsf3+0x12>
 a46:	95 1b       	sub	r25, r21
 a48:	55 0b       	sbc	r21, r21
 a4a:	bb 27       	eor	r27, r27
 a4c:	aa 27       	eor	r26, r26
 a4e:	62 17       	cp	r22, r18
 a50:	73 07       	cpc	r23, r19
 a52:	84 07       	cpc	r24, r20
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__divsf3_pse+0x26>
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	5f 4f       	sbci	r21, 0xFF	; 255
 a5a:	22 0f       	add	r18, r18
 a5c:	33 1f       	adc	r19, r19
 a5e:	44 1f       	adc	r20, r20
 a60:	aa 1f       	adc	r26, r26
 a62:	a9 f3       	breq	.-22     	; 0xa4e <__divsf3_pse+0x10>
 a64:	33 d0       	rcall	.+102    	; 0xacc <__divsf3_pse+0x8e>
 a66:	0e 2e       	mov	r0, r30
 a68:	3a f0       	brmi	.+14     	; 0xa78 <__divsf3_pse+0x3a>
 a6a:	e0 e8       	ldi	r30, 0x80	; 128
 a6c:	30 d0       	rcall	.+96     	; 0xace <__divsf3_pse+0x90>
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	e6 95       	lsr	r30
 a74:	00 1c       	adc	r0, r0
 a76:	ca f7       	brpl	.-14     	; 0xa6a <__divsf3_pse+0x2c>
 a78:	29 d0       	rcall	.+82     	; 0xacc <__divsf3_pse+0x8e>
 a7a:	fe 2f       	mov	r31, r30
 a7c:	27 d0       	rcall	.+78     	; 0xacc <__divsf3_pse+0x8e>
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	bb 1f       	adc	r27, r27
 a86:	26 17       	cp	r18, r22
 a88:	37 07       	cpc	r19, r23
 a8a:	48 07       	cpc	r20, r24
 a8c:	ab 07       	cpc	r26, r27
 a8e:	b0 e8       	ldi	r27, 0x80	; 128
 a90:	09 f0       	breq	.+2      	; 0xa94 <__divsf3_pse+0x56>
 a92:	bb 0b       	sbc	r27, r27
 a94:	80 2d       	mov	r24, r0
 a96:	bf 01       	movw	r22, r30
 a98:	ff 27       	eor	r31, r31
 a9a:	93 58       	subi	r25, 0x83	; 131
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	2a f0       	brmi	.+10     	; 0xaaa <__divsf3_pse+0x6c>
 aa0:	9e 3f       	cpi	r25, 0xFE	; 254
 aa2:	51 05       	cpc	r21, r1
 aa4:	68 f0       	brcs	.+26     	; 0xac0 <__divsf3_pse+0x82>
 aa6:	92 c0       	rjmp	.+292    	; 0xbcc <__fp_inf>
 aa8:	dc c0       	rjmp	.+440    	; 0xc62 <__fp_szero>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	ec f3       	brlt	.-6      	; 0xaa8 <__divsf3_pse+0x6a>
 aae:	98 3e       	cpi	r25, 0xE8	; 232
 ab0:	dc f3       	brlt	.-10     	; 0xaa8 <__divsf3_pse+0x6a>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f7 95       	ror	r31
 abc:	9f 5f       	subi	r25, 0xFF	; 255
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__divsf3_pse+0x74>
 ac0:	88 0f       	add	r24, r24
 ac2:	91 1d       	adc	r25, r1
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret
 acc:	e1 e0       	ldi	r30, 0x01	; 1
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	bb 1f       	adc	r27, r27
 ad6:	62 17       	cp	r22, r18
 ad8:	73 07       	cpc	r23, r19
 ada:	84 07       	cpc	r24, r20
 adc:	ba 07       	cpc	r27, r26
 ade:	20 f0       	brcs	.+8      	; 0xae8 <__divsf3_pse+0xaa>
 ae0:	62 1b       	sub	r22, r18
 ae2:	73 0b       	sbc	r23, r19
 ae4:	84 0b       	sbc	r24, r20
 ae6:	ba 0b       	sbc	r27, r26
 ae8:	ee 1f       	adc	r30, r30
 aea:	88 f7       	brcc	.-30     	; 0xace <__divsf3_pse+0x90>
 aec:	e0 95       	com	r30
 aee:	08 95       	ret

00000af0 <__fixsfsi>:
 af0:	04 d0       	rcall	.+8      	; 0xafa <__fixunssfsi>
 af2:	68 94       	set
 af4:	b1 11       	cpse	r27, r1
 af6:	b5 c0       	rjmp	.+362    	; 0xc62 <__fp_szero>
 af8:	08 95       	ret

00000afa <__fixunssfsi>:
 afa:	98 d0       	rcall	.+304    	; 0xc2c <__fp_splitA>
 afc:	88 f0       	brcs	.+34     	; 0xb20 <__fixunssfsi+0x26>
 afe:	9f 57       	subi	r25, 0x7F	; 127
 b00:	90 f0       	brcs	.+36     	; 0xb26 <__fixunssfsi+0x2c>
 b02:	b9 2f       	mov	r27, r25
 b04:	99 27       	eor	r25, r25
 b06:	b7 51       	subi	r27, 0x17	; 23
 b08:	a0 f0       	brcs	.+40     	; 0xb32 <__fixunssfsi+0x38>
 b0a:	d1 f0       	breq	.+52     	; 0xb40 <__fixunssfsi+0x46>
 b0c:	66 0f       	add	r22, r22
 b0e:	77 1f       	adc	r23, r23
 b10:	88 1f       	adc	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	1a f0       	brmi	.+6      	; 0xb1c <__fixunssfsi+0x22>
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__fixunssfsi+0x12>
 b1a:	12 c0       	rjmp	.+36     	; 0xb40 <__fixunssfsi+0x46>
 b1c:	b1 30       	cpi	r27, 0x01	; 1
 b1e:	81 f0       	breq	.+32     	; 0xb40 <__fixunssfsi+0x46>
 b20:	9f d0       	rcall	.+318    	; 0xc60 <__fp_zero>
 b22:	b1 e0       	ldi	r27, 0x01	; 1
 b24:	08 95       	ret
 b26:	9c c0       	rjmp	.+312    	; 0xc60 <__fp_zero>
 b28:	67 2f       	mov	r22, r23
 b2a:	78 2f       	mov	r23, r24
 b2c:	88 27       	eor	r24, r24
 b2e:	b8 5f       	subi	r27, 0xF8	; 248
 b30:	39 f0       	breq	.+14     	; 0xb40 <__fixunssfsi+0x46>
 b32:	b9 3f       	cpi	r27, 0xF9	; 249
 b34:	cc f3       	brlt	.-14     	; 0xb28 <__fixunssfsi+0x2e>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b3 95       	inc	r27
 b3e:	d9 f7       	brne	.-10     	; 0xb36 <__fixunssfsi+0x3c>
 b40:	3e f4       	brtc	.+14     	; 0xb50 <__fixunssfsi+0x56>
 b42:	90 95       	com	r25
 b44:	80 95       	com	r24
 b46:	70 95       	com	r23
 b48:	61 95       	neg	r22
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__floatunsisf>:
 b52:	e8 94       	clt
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <__floatsisf+0x12>

00000b56 <__floatsisf>:
 b56:	97 fb       	bst	r25, 7
 b58:	3e f4       	brtc	.+14     	; 0xb68 <__floatsisf+0x12>
 b5a:	90 95       	com	r25
 b5c:	80 95       	com	r24
 b5e:	70 95       	com	r23
 b60:	61 95       	neg	r22
 b62:	7f 4f       	sbci	r23, 0xFF	; 255
 b64:	8f 4f       	sbci	r24, 0xFF	; 255
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	99 23       	and	r25, r25
 b6a:	a9 f0       	breq	.+42     	; 0xb96 <__floatsisf+0x40>
 b6c:	f9 2f       	mov	r31, r25
 b6e:	96 e9       	ldi	r25, 0x96	; 150
 b70:	bb 27       	eor	r27, r27
 b72:	93 95       	inc	r25
 b74:	f6 95       	lsr	r31
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f1 11       	cpse	r31, r1
 b80:	f8 cf       	rjmp	.-16     	; 0xb72 <__floatsisf+0x1c>
 b82:	fa f4       	brpl	.+62     	; 0xbc2 <__floatsisf+0x6c>
 b84:	bb 0f       	add	r27, r27
 b86:	11 f4       	brne	.+4      	; 0xb8c <__floatsisf+0x36>
 b88:	60 ff       	sbrs	r22, 0
 b8a:	1b c0       	rjmp	.+54     	; 0xbc2 <__floatsisf+0x6c>
 b8c:	6f 5f       	subi	r22, 0xFF	; 255
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <__floatsisf+0x6c>
 b96:	88 23       	and	r24, r24
 b98:	11 f0       	breq	.+4      	; 0xb9e <__floatsisf+0x48>
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__floatsisf+0x6a>
 b9e:	77 23       	and	r23, r23
 ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatsisf+0x54>
 ba2:	9e e8       	ldi	r25, 0x8E	; 142
 ba4:	87 2f       	mov	r24, r23
 ba6:	76 2f       	mov	r23, r22
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__floatsisf+0x5e>
 baa:	66 23       	and	r22, r22
 bac:	71 f0       	breq	.+28     	; 0xbca <__floatsisf+0x74>
 bae:	96 e8       	ldi	r25, 0x86	; 134
 bb0:	86 2f       	mov	r24, r22
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <__floatsisf+0x6c>
 bb8:	9a 95       	dec	r25
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	da f7       	brpl	.-10     	; 0xbb8 <__floatsisf+0x62>
 bc2:	88 0f       	add	r24, r24
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__fp_inf>:
 bcc:	97 f9       	bld	r25, 7
 bce:	9f 67       	ori	r25, 0x7F	; 127
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	08 95       	ret

00000bd8 <__fp_nan>:
 bd8:	9f ef       	ldi	r25, 0xFF	; 255
 bda:	80 ec       	ldi	r24, 0xC0	; 192
 bdc:	08 95       	ret

00000bde <__fp_pscA>:
 bde:	00 24       	eor	r0, r0
 be0:	0a 94       	dec	r0
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	18 06       	cpc	r1, r24
 be8:	09 06       	cpc	r0, r25
 bea:	08 95       	ret

00000bec <__fp_pscB>:
 bec:	00 24       	eor	r0, r0
 bee:	0a 94       	dec	r0
 bf0:	12 16       	cp	r1, r18
 bf2:	13 06       	cpc	r1, r19
 bf4:	14 06       	cpc	r1, r20
 bf6:	05 06       	cpc	r0, r21
 bf8:	08 95       	ret

00000bfa <__fp_round>:
 bfa:	09 2e       	mov	r0, r25
 bfc:	03 94       	inc	r0
 bfe:	00 0c       	add	r0, r0
 c00:	11 f4       	brne	.+4      	; 0xc06 <__fp_round+0xc>
 c02:	88 23       	and	r24, r24
 c04:	52 f0       	brmi	.+20     	; 0xc1a <__fp_round+0x20>
 c06:	bb 0f       	add	r27, r27
 c08:	40 f4       	brcc	.+16     	; 0xc1a <__fp_round+0x20>
 c0a:	bf 2b       	or	r27, r31
 c0c:	11 f4       	brne	.+4      	; 0xc12 <__fp_round+0x18>
 c0e:	60 ff       	sbrs	r22, 0
 c10:	04 c0       	rjmp	.+8      	; 0xc1a <__fp_round+0x20>
 c12:	6f 5f       	subi	r22, 0xFF	; 255
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__fp_split3>:
 c1c:	57 fd       	sbrc	r21, 7
 c1e:	90 58       	subi	r25, 0x80	; 128
 c20:	44 0f       	add	r20, r20
 c22:	55 1f       	adc	r21, r21
 c24:	59 f0       	breq	.+22     	; 0xc3c <__fp_splitA+0x10>
 c26:	5f 3f       	cpi	r21, 0xFF	; 255
 c28:	71 f0       	breq	.+28     	; 0xc46 <__fp_splitA+0x1a>
 c2a:	47 95       	ror	r20

00000c2c <__fp_splitA>:
 c2c:	88 0f       	add	r24, r24
 c2e:	97 fb       	bst	r25, 7
 c30:	99 1f       	adc	r25, r25
 c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_splitA+0x20>
 c34:	9f 3f       	cpi	r25, 0xFF	; 255
 c36:	79 f0       	breq	.+30     	; 0xc56 <__fp_splitA+0x2a>
 c38:	87 95       	ror	r24
 c3a:	08 95       	ret
 c3c:	12 16       	cp	r1, r18
 c3e:	13 06       	cpc	r1, r19
 c40:	14 06       	cpc	r1, r20
 c42:	55 1f       	adc	r21, r21
 c44:	f2 cf       	rjmp	.-28     	; 0xc2a <__fp_split3+0xe>
 c46:	46 95       	lsr	r20
 c48:	f1 df       	rcall	.-30     	; 0xc2c <__fp_splitA>
 c4a:	08 c0       	rjmp	.+16     	; 0xc5c <__fp_splitA+0x30>
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	99 1f       	adc	r25, r25
 c54:	f1 cf       	rjmp	.-30     	; 0xc38 <__fp_splitA+0xc>
 c56:	86 95       	lsr	r24
 c58:	71 05       	cpc	r23, r1
 c5a:	61 05       	cpc	r22, r1
 c5c:	08 94       	sec
 c5e:	08 95       	ret

00000c60 <__fp_zero>:
 c60:	e8 94       	clt

00000c62 <__fp_szero>:
 c62:	bb 27       	eor	r27, r27
 c64:	66 27       	eor	r22, r22
 c66:	77 27       	eor	r23, r23
 c68:	cb 01       	movw	r24, r22
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret

00000c6e <__mulsf3>:
 c6e:	0b d0       	rcall	.+22     	; 0xc86 <__mulsf3x>
 c70:	c4 cf       	rjmp	.-120    	; 0xbfa <__fp_round>
 c72:	b5 df       	rcall	.-150    	; 0xbde <__fp_pscA>
 c74:	28 f0       	brcs	.+10     	; 0xc80 <__mulsf3+0x12>
 c76:	ba df       	rcall	.-140    	; 0xbec <__fp_pscB>
 c78:	18 f0       	brcs	.+6      	; 0xc80 <__mulsf3+0x12>
 c7a:	95 23       	and	r25, r21
 c7c:	09 f0       	breq	.+2      	; 0xc80 <__mulsf3+0x12>
 c7e:	a6 cf       	rjmp	.-180    	; 0xbcc <__fp_inf>
 c80:	ab cf       	rjmp	.-170    	; 0xbd8 <__fp_nan>
 c82:	11 24       	eor	r1, r1
 c84:	ee cf       	rjmp	.-36     	; 0xc62 <__fp_szero>

00000c86 <__mulsf3x>:
 c86:	ca df       	rcall	.-108    	; 0xc1c <__fp_split3>
 c88:	a0 f3       	brcs	.-24     	; 0xc72 <__mulsf3+0x4>

00000c8a <__mulsf3_pse>:
 c8a:	95 9f       	mul	r25, r21
 c8c:	d1 f3       	breq	.-12     	; 0xc82 <__mulsf3+0x14>
 c8e:	95 0f       	add	r25, r21
 c90:	50 e0       	ldi	r21, 0x00	; 0
 c92:	55 1f       	adc	r21, r21
 c94:	62 9f       	mul	r22, r18
 c96:	f0 01       	movw	r30, r0
 c98:	72 9f       	mul	r23, r18
 c9a:	bb 27       	eor	r27, r27
 c9c:	f0 0d       	add	r31, r0
 c9e:	b1 1d       	adc	r27, r1
 ca0:	63 9f       	mul	r22, r19
 ca2:	aa 27       	eor	r26, r26
 ca4:	f0 0d       	add	r31, r0
 ca6:	b1 1d       	adc	r27, r1
 ca8:	aa 1f       	adc	r26, r26
 caa:	64 9f       	mul	r22, r20
 cac:	66 27       	eor	r22, r22
 cae:	b0 0d       	add	r27, r0
 cb0:	a1 1d       	adc	r26, r1
 cb2:	66 1f       	adc	r22, r22
 cb4:	82 9f       	mul	r24, r18
 cb6:	22 27       	eor	r18, r18
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	62 1f       	adc	r22, r18
 cbe:	73 9f       	mul	r23, r19
 cc0:	b0 0d       	add	r27, r0
 cc2:	a1 1d       	adc	r26, r1
 cc4:	62 1f       	adc	r22, r18
 cc6:	83 9f       	mul	r24, r19
 cc8:	a0 0d       	add	r26, r0
 cca:	61 1d       	adc	r22, r1
 ccc:	22 1f       	adc	r18, r18
 cce:	74 9f       	mul	r23, r20
 cd0:	33 27       	eor	r19, r19
 cd2:	a0 0d       	add	r26, r0
 cd4:	61 1d       	adc	r22, r1
 cd6:	23 1f       	adc	r18, r19
 cd8:	84 9f       	mul	r24, r20
 cda:	60 0d       	add	r22, r0
 cdc:	21 1d       	adc	r18, r1
 cde:	82 2f       	mov	r24, r18
 ce0:	76 2f       	mov	r23, r22
 ce2:	6a 2f       	mov	r22, r26
 ce4:	11 24       	eor	r1, r1
 ce6:	9f 57       	subi	r25, 0x7F	; 127
 ce8:	50 40       	sbci	r21, 0x00	; 0
 cea:	8a f0       	brmi	.+34     	; 0xd0e <__mulsf3_pse+0x84>
 cec:	e1 f0       	breq	.+56     	; 0xd26 <__mulsf3_pse+0x9c>
 cee:	88 23       	and	r24, r24
 cf0:	4a f0       	brmi	.+18     	; 0xd04 <__mulsf3_pse+0x7a>
 cf2:	ee 0f       	add	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	bb 1f       	adc	r27, r27
 cf8:	66 1f       	adc	r22, r22
 cfa:	77 1f       	adc	r23, r23
 cfc:	88 1f       	adc	r24, r24
 cfe:	91 50       	subi	r25, 0x01	; 1
 d00:	50 40       	sbci	r21, 0x00	; 0
 d02:	a9 f7       	brne	.-22     	; 0xcee <__mulsf3_pse+0x64>
 d04:	9e 3f       	cpi	r25, 0xFE	; 254
 d06:	51 05       	cpc	r21, r1
 d08:	70 f0       	brcs	.+28     	; 0xd26 <__mulsf3_pse+0x9c>
 d0a:	60 cf       	rjmp	.-320    	; 0xbcc <__fp_inf>
 d0c:	aa cf       	rjmp	.-172    	; 0xc62 <__fp_szero>
 d0e:	5f 3f       	cpi	r21, 0xFF	; 255
 d10:	ec f3       	brlt	.-6      	; 0xd0c <__mulsf3_pse+0x82>
 d12:	98 3e       	cpi	r25, 0xE8	; 232
 d14:	dc f3       	brlt	.-10     	; 0xd0c <__mulsf3_pse+0x82>
 d16:	86 95       	lsr	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	b7 95       	ror	r27
 d1e:	f7 95       	ror	r31
 d20:	e7 95       	ror	r30
 d22:	9f 5f       	subi	r25, 0xFF	; 255
 d24:	c1 f7       	brne	.-16     	; 0xd16 <__mulsf3_pse+0x8c>
 d26:	fe 2b       	or	r31, r30
 d28:	88 0f       	add	r24, r24
 d2a:	91 1d       	adc	r25, r1
 d2c:	96 95       	lsr	r25
 d2e:	87 95       	ror	r24
 d30:	97 f9       	bld	r25, 7
 d32:	08 95       	ret

00000d34 <_exit>:
 d34:	f8 94       	cli

00000d36 <__stop_program>:
 d36:	ff cf       	rjmp	.-2      	; 0xd36 <__stop_program>
