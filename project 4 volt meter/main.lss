
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001248  000012dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800066  00800066  000012e2  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001aa  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000643  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002dd  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a1  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000026d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
      8a:	0c 94 22 09 	jmp	0x1244	; 0x1244 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <print_initial>:
unsigned int max_hundredths = 0;
unsigned int a_tenths = 0;
unsigned int a_hundredths = 0;

void print_initial()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	pos_lcd(0,0);
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_str_lcd("____");
      a2:	80 e6       	ldi	r24, 0x60	; 96
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	0e 94 be 05 	call	0xb7c	; 0xb7c <put_str_lcd>
	pos_lcd(0,12);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	6c e0       	ldi	r22, 0x0C	; 12
      ae:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_str_lcd("____");
      b2:	80 e6       	ldi	r24, 0x60	; 96
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 be 05 	call	0xb7c	; 0xb7c <put_str_lcd>
	pos_lcd(1,0);
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_str_lcd("____");
      c2:	80 e6       	ldi	r24, 0x60	; 96
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 be 05 	call	0xb7c	; 0xb7c <put_str_lcd>
	pos_lcd(1,12);
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	6c e0       	ldi	r22, 0x0C	; 12
      ce:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_str_lcd("____");
      d2:	80 e6       	ldi	r24, 0x60	; 96
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 be 05 	call	0xb7c	; 0xb7c <put_str_lcd>
}
      da:	cf 91       	pop	r28
      dc:	df 91       	pop	r29
      de:	08 95       	ret

000000e0 <print_current>:
void print_current(float voltage)
{
      e0:	df 93       	push	r29
      e2:	cf 93       	push	r28
      e4:	00 d0       	rcall	.+0      	; 0xe6 <print_current+0x6>
      e6:	00 d0       	rcall	.+0      	; 0xe8 <print_current+0x8>
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	69 83       	std	Y+1, r22	; 0x01
      ee:	7a 83       	std	Y+2, r23	; 0x02
      f0:	8b 83       	std	Y+3, r24	; 0x03
      f2:	9c 83       	std	Y+4, r25	; 0x04
	pos_lcd(0,0);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('0' + voltage);
      fc:	69 81       	ldd	r22, Y+1	; 0x01
      fe:	7a 81       	ldd	r23, Y+2	; 0x02
     100:	8b 81       	ldd	r24, Y+3	; 0x03
     102:	9c 81       	ldd	r25, Y+4	; 0x04
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	40 e4       	ldi	r20, 0x40	; 64
     10a:	52 e4       	ldi	r21, 0x42	; 66
     10c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     110:	dc 01       	movw	r26, r24
     112:	cb 01       	movw	r24, r22
     114:	bc 01       	movw	r22, r24
     116:	cd 01       	movw	r24, r26
     118:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fixunssfsi>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
	
	pos_lcd(0,1);
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('.');
     12c:	8e e2       	ldi	r24, 0x2E	; 46
     12e:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(0,2);
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	62 e0       	ldi	r22, 0x02	; 2
     136:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	c_tenths = ((int) (voltage * 10)) % 10;
     13a:	69 81       	ldd	r22, Y+1	; 0x01
     13c:	7a 81       	ldd	r23, Y+2	; 0x02
     13e:	8b 81       	ldd	r24, Y+3	; 0x03
     140:	9c 81       	ldd	r25, Y+4	; 0x04
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	40 e2       	ldi	r20, 0x20	; 32
     148:	51 e4       	ldi	r21, 0x41	; 65
     14a:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     14e:	dc 01       	movw	r26, r24
     150:	cb 01       	movw	r24, r22
     152:	bc 01       	movw	r22, r24
     154:	cd 01       	movw	r24, r26
     156:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     15a:	dc 01       	movw	r26, r24
     15c:	cb 01       	movw	r24, r22
     15e:	2a e0       	ldi	r18, 0x0A	; 10
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	b9 01       	movw	r22, r18
     164:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     168:	90 93 67 00 	sts	0x0067, r25
     16c:	80 93 66 00 	sts	0x0066, r24
	put_lcd('0' + c_tenths);
     170:	80 91 66 00 	lds	r24, 0x0066
     174:	90 91 67 00 	lds	r25, 0x0067
     178:	80 5d       	subi	r24, 0xD0	; 208
     17a:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(0,3);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	63 e0       	ldi	r22, 0x03	; 3
     182:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	c_hundredths = ((int) (voltage * 100)) % 10;
     186:	69 81       	ldd	r22, Y+1	; 0x01
     188:	7a 81       	ldd	r23, Y+2	; 0x02
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	9c 81       	ldd	r25, Y+4	; 0x04
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	48 ec       	ldi	r20, 0xC8	; 200
     194:	52 e4       	ldi	r21, 0x42	; 66
     196:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	bc 01       	movw	r22, r24
     1a0:	cd 01       	movw	r24, r26
     1a2:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	2a e0       	ldi	r18, 0x0A	; 10
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	b9 01       	movw	r22, r18
     1b0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     1b4:	90 93 69 00 	sts	0x0069, r25
     1b8:	80 93 68 00 	sts	0x0068, r24
	put_lcd('0' + c_hundredths);
     1bc:	80 91 68 00 	lds	r24, 0x0068
     1c0:	90 91 69 00 	lds	r25, 0x0069
     1c4:	80 5d       	subi	r24, 0xD0	; 208
     1c6:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
}
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <print_average>:

void print_average(float average)
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <print_average+0x6>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <print_average+0x8>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	69 83       	std	Y+1, r22	; 0x01
     1e6:	7a 83       	std	Y+2, r23	; 0x02
     1e8:	8b 83       	std	Y+3, r24	; 0x03
     1ea:	9c 83       	std	Y+4, r25	; 0x04
	pos_lcd(0,12);
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	6c e0       	ldi	r22, 0x0C	; 12
     1f0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('0' + average);
     1f4:	69 81       	ldd	r22, Y+1	; 0x01
     1f6:	7a 81       	ldd	r23, Y+2	; 0x02
     1f8:	8b 81       	ldd	r24, Y+3	; 0x03
     1fa:	9c 81       	ldd	r25, Y+4	; 0x04
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	40 e4       	ldi	r20, 0x40	; 64
     202:	52 e4       	ldi	r21, 0x42	; 66
     204:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fixunssfsi>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
	
	pos_lcd(0,13);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	6d e0       	ldi	r22, 0x0D	; 13
     220:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('.');
     224:	8e e2       	ldi	r24, 0x2E	; 46
     226:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(0,14);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	6e e0       	ldi	r22, 0x0E	; 14
     22e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	a_tenths = ((int) (average * 10)) % 10;
     232:	69 81       	ldd	r22, Y+1	; 0x01
     234:	7a 81       	ldd	r23, Y+2	; 0x02
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e2       	ldi	r20, 0x20	; 32
     240:	51 e4       	ldi	r21, 0x41	; 65
     242:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     246:	dc 01       	movw	r26, r24
     248:	cb 01       	movw	r24, r22
     24a:	bc 01       	movw	r22, r24
     24c:	cd 01       	movw	r24, r26
     24e:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	2a e0       	ldi	r18, 0x0A	; 10
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	b9 01       	movw	r22, r18
     25c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     260:	90 93 73 00 	sts	0x0073, r25
     264:	80 93 72 00 	sts	0x0072, r24
	put_lcd('0' + a_tenths);
     268:	80 91 72 00 	lds	r24, 0x0072
     26c:	90 91 73 00 	lds	r25, 0x0073
     270:	80 5d       	subi	r24, 0xD0	; 208
     272:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(0,15);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	6f e0       	ldi	r22, 0x0F	; 15
     27a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	a_hundredths = ((int) (average * 100)) % 10;
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	7a 81       	ldd	r23, Y+2	; 0x02
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	9c 81       	ldd	r25, Y+4	; 0x04
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	48 ec       	ldi	r20, 0xC8	; 200
     28c:	52 e4       	ldi	r21, 0x42	; 66
     28e:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	2a e0       	ldi	r18, 0x0A	; 10
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	b9 01       	movw	r22, r18
     2a8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     2ac:	90 93 75 00 	sts	0x0075, r25
     2b0:	80 93 74 00 	sts	0x0074, r24
	put_lcd('0' + a_hundredths);
     2b4:	80 91 74 00 	lds	r24, 0x0074
     2b8:	90 91 75 00 	lds	r25, 0x0075
     2bc:	80 5d       	subi	r24, 0xD0	; 208
     2be:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <print_min>:

void print_min(float min)
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <print_min+0x6>
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <print_min+0x8>
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	69 83       	std	Y+1, r22	; 0x01
     2de:	7a 83       	std	Y+2, r23	; 0x02
     2e0:	8b 83       	std	Y+3, r24	; 0x03
     2e2:	9c 83       	std	Y+4, r25	; 0x04
	pos_lcd(1,12);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	6c e0       	ldi	r22, 0x0C	; 12
     2e8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('0' + min);
     2ec:	69 81       	ldd	r22, Y+1	; 0x01
     2ee:	7a 81       	ldd	r23, Y+2	; 0x02
     2f0:	8b 81       	ldd	r24, Y+3	; 0x03
     2f2:	9c 81       	ldd	r25, Y+4	; 0x04
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e4       	ldi	r20, 0x40	; 64
     2fa:	52 e4       	ldi	r21, 0x42	; 66
     2fc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fixunssfsi>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
	
	pos_lcd(1,13);
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	6d e0       	ldi	r22, 0x0D	; 13
     318:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('.');
     31c:	8e e2       	ldi	r24, 0x2E	; 46
     31e:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(1,14);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	6e e0       	ldi	r22, 0x0E	; 14
     326:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	min_tenths = ((int) (min * 10)) % 10;
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	7a 81       	ldd	r23, Y+2	; 0x02
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e2       	ldi	r20, 0x20	; 32
     338:	51 e4       	ldi	r21, 0x41	; 65
     33a:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	2a e0       	ldi	r18, 0x0A	; 10
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	b9 01       	movw	r22, r18
     354:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     358:	90 93 6b 00 	sts	0x006B, r25
     35c:	80 93 6a 00 	sts	0x006A, r24
	put_lcd('0' + min_tenths);
     360:	80 91 6a 00 	lds	r24, 0x006A
     364:	90 91 6b 00 	lds	r25, 0x006B
     368:	80 5d       	subi	r24, 0xD0	; 208
     36a:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(1,15);
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	6f e0       	ldi	r22, 0x0F	; 15
     372:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	min_hundredths = ((int) (min * 100)) % 10;
     376:	69 81       	ldd	r22, Y+1	; 0x01
     378:	7a 81       	ldd	r23, Y+2	; 0x02
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	9c 81       	ldd	r25, Y+4	; 0x04
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	48 ec       	ldi	r20, 0xC8	; 200
     384:	52 e4       	ldi	r21, 0x42	; 66
     386:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	bc 01       	movw	r22, r24
     390:	cd 01       	movw	r24, r26
     392:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	2a e0       	ldi	r18, 0x0A	; 10
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	b9 01       	movw	r22, r18
     3a0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     3a4:	90 93 6d 00 	sts	0x006D, r25
     3a8:	80 93 6c 00 	sts	0x006C, r24
	put_lcd('0' + min_hundredths);
     3ac:	80 91 6c 00 	lds	r24, 0x006C
     3b0:	90 91 6d 00 	lds	r25, 0x006D
     3b4:	80 5d       	subi	r24, 0xD0	; 208
     3b6:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <print_max>:

void print_max(float max)
{
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <print_max+0x6>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <print_max+0x8>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	69 83       	std	Y+1, r22	; 0x01
     3d6:	7a 83       	std	Y+2, r23	; 0x02
     3d8:	8b 83       	std	Y+3, r24	; 0x03
     3da:	9c 83       	std	Y+4, r25	; 0x04
	pos_lcd(1,0);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('0' + max);
     3e4:	69 81       	ldd	r22, Y+1	; 0x01
     3e6:	7a 81       	ldd	r23, Y+2	; 0x02
     3e8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ea:	9c 81       	ldd	r25, Y+4	; 0x04
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e4       	ldi	r20, 0x40	; 64
     3f2:	52 e4       	ldi	r21, 0x42	; 66
     3f4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fixunssfsi>
     404:	dc 01       	movw	r26, r24
     406:	cb 01       	movw	r24, r22
     408:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
	
	pos_lcd(1,1);
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	put_lcd('.');
     414:	8e e2       	ldi	r24, 0x2E	; 46
     416:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(1,2);
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	max_tenths = ((int) (max * 10)) % 10;
     422:	69 81       	ldd	r22, Y+1	; 0x01
     424:	7a 81       	ldd	r23, Y+2	; 0x02
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e2       	ldi	r20, 0x20	; 32
     430:	51 e4       	ldi	r21, 0x41	; 65
     432:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	bc 01       	movw	r22, r24
     43c:	cd 01       	movw	r24, r26
     43e:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	2a e0       	ldi	r18, 0x0A	; 10
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     450:	90 93 6f 00 	sts	0x006F, r25
     454:	80 93 6e 00 	sts	0x006E, r24
	put_lcd('0' + max_tenths);
     458:	80 91 6e 00 	lds	r24, 0x006E
     45c:	90 91 6f 00 	lds	r25, 0x006F
     460:	80 5d       	subi	r24, 0xD0	; 208
     462:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
			
	pos_lcd(1,3);
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <pos_lcd>
	max_hundredths = ((int) (max * 100)) % 10;
     46e:	69 81       	ldd	r22, Y+1	; 0x01
     470:	7a 81       	ldd	r23, Y+2	; 0x02
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	48 ec       	ldi	r20, 0xC8	; 200
     47c:	52 e4       	ldi	r21, 0x42	; 66
     47e:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	bc 01       	movw	r22, r24
     488:	cd 01       	movw	r24, r26
     48a:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixsfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	2a e0       	ldi	r18, 0x0A	; 10
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	b9 01       	movw	r22, r18
     498:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodhi4>
     49c:	90 93 71 00 	sts	0x0071, r25
     4a0:	80 93 70 00 	sts	0x0070, r24
	put_lcd('0' + max_hundredths);
     4a4:	80 91 70 00 	lds	r24, 0x0070
     4a8:	90 91 71 00 	lds	r25, 0x0071
     4ac:	80 5d       	subi	r24, 0xD0	; 208
     4ae:	0e 94 87 05 	call	0xb0e	; 0xb0e <put_lcd>
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <main>:

void main(){
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	67 97       	sbiw	r28, 0x17	; 23
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
	float voltage = 0.00;
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	a0 e0       	ldi	r26, 0x00	; 0
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	8c 8b       	std	Y+20, r24	; 0x14
     4de:	9d 8b       	std	Y+21, r25	; 0x15
     4e0:	ae 8b       	std	Y+22, r26	; 0x16
     4e2:	bf 8b       	std	Y+23, r27	; 0x17
	float max = 0.00;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	88 8b       	std	Y+16, r24	; 0x10
     4ee:	99 8b       	std	Y+17, r25	; 0x11
     4f0:	aa 8b       	std	Y+18, r26	; 0x12
     4f2:	bb 8b       	std	Y+19, r27	; 0x13
	float min = 10.00; // initialize to value that cannot be reached
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	a0 e2       	ldi	r26, 0x20	; 32
     4fa:	b1 e4       	ldi	r27, 0x41	; 65
     4fc:	8c 87       	std	Y+12, r24	; 0x0c
     4fe:	9d 87       	std	Y+13, r25	; 0x0d
     500:	ae 87       	std	Y+14, r26	; 0x0e
     502:	bf 87       	std	Y+15, r27	; 0x0f
	float average = 0.00;
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	a0 e0       	ldi	r26, 0x00	; 0
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	88 87       	std	Y+8, r24	; 0x08
     50e:	99 87       	std	Y+9, r25	; 0x09
     510:	aa 87       	std	Y+10, r26	; 0x0a
     512:	bb 87       	std	Y+11, r27	; 0x0b
	float total = 0.00;
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	a0 e0       	ldi	r26, 0x00	; 0
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	8c 83       	std	Y+4, r24	; 0x04
     51e:	9d 83       	std	Y+5, r25	; 0x05
     520:	ae 83       	std	Y+6, r26	; 0x06
     522:	bf 83       	std	Y+7, r27	; 0x07
	unsigned char start = 0;
     524:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int count = 0;
     526:	1a 82       	std	Y+2, r1	; 0x02
     528:	19 82       	std	Y+1, r1	; 0x01
	ini_lcd();
     52a:	0e 94 02 05 	call	0xa04	; 0xa04 <ini_lcd>
	clr_lcd();
     52e:	0e 94 42 05 	call	0xa84	; 0xa84 <clr_lcd>
	print_initial();
     532:	0e 94 49 00 	call	0x92	; 0x92 <print_initial>

	for(;;)
	{
		// A = START
		if (get_key() == 13)
     536:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_key>
     53a:	8d 30       	cpi	r24, 0x0D	; 13
     53c:	91 05       	cpc	r25, r1
     53e:	09 f0       	breq	.+2      	; 0x542 <main+0x82>
     540:	13 c1       	rjmp	.+550    	; 0x768 <main+0x2a8>
		{
			start = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	0b c1       	rjmp	.+534    	; 0x75e <main+0x29e>
			while(start){
				//Voltage  for ADC: AVCC with external capacitor at AREF pin
				//Bit 7 (REFS1) = 0 , Bit 6 (REFS0) = 1
				//Make results in ADCH left adjusted
				//Bit 5 (ADLAR) = 1
				ADMUX = 0x60;
     548:	e7 e2       	ldi	r30, 0x27	; 39
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 e6       	ldi	r24, 0x60	; 96
     54e:	80 83       	st	Z, r24
				
				//Enable ADC
				//Bit 7 (ADEN) = 1
				//Start ADC COnversion
				//Bit 6 (ADSC) = 1
				ADCSRA = 0xc0;
     550:	e6 e2       	ldi	r30, 0x26	; 38
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	80 83       	st	Z, r24
				count += 1;
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	9a 83       	std	Y+2, r25	; 0x02
     560:	89 83       	std	Y+1, r24	; 0x01
				voltage = ((((float) ADCH) + 0.00) * 5.00) / 255.00;
     562:	e5 e2       	ldi	r30, 0x25	; 37
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	bc 01       	movw	r22, r24
     572:	cd 01       	movw	r24, r26
     574:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__floatunsisf>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	bc 01       	movw	r22, r24
     57e:	cd 01       	movw	r24, r26
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	bc 01       	movw	r22, r24
     592:	cd 01       	movw	r24, r26
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 ea       	ldi	r20, 0xA0	; 160
     59a:	50 e4       	ldi	r21, 0x40	; 64
     59c:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	4f e7       	ldi	r20, 0x7F	; 127
     5ae:	53 e4       	ldi	r21, 0x43	; 67
     5b0:	0e 94 49 07 	call	0xe92	; 0xe92 <__divsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	8c 8b       	std	Y+20, r24	; 0x14
     5ba:	9d 8b       	std	Y+21, r25	; 0x15
     5bc:	ae 8b       	std	Y+22, r26	; 0x16
     5be:	bf 8b       	std	Y+23, r27	; 0x17
				print_current(voltage);
     5c0:	8c 89       	ldd	r24, Y+20	; 0x14
     5c2:	9d 89       	ldd	r25, Y+21	; 0x15
     5c4:	ae 89       	ldd	r26, Y+22	; 0x16
     5c6:	bf 89       	ldd	r27, Y+23	; 0x17
     5c8:	bc 01       	movw	r22, r24
     5ca:	cd 01       	movw	r24, r26
     5cc:	0e 94 70 00 	call	0xe0	; 0xe0 <print_current>
				total = total + voltage;
     5d0:	6c 81       	ldd	r22, Y+4	; 0x04
     5d2:	7d 81       	ldd	r23, Y+5	; 0x05
     5d4:	8e 81       	ldd	r24, Y+6	; 0x06
     5d6:	9f 81       	ldd	r25, Y+7	; 0x07
     5d8:	2c 89       	ldd	r18, Y+20	; 0x14
     5da:	3d 89       	ldd	r19, Y+21	; 0x15
     5dc:	4e 89       	ldd	r20, Y+22	; 0x16
     5de:	5f 89       	ldd	r21, Y+23	; 0x17
     5e0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	8c 83       	std	Y+4, r24	; 0x04
     5ea:	9d 83       	std	Y+5, r25	; 0x05
     5ec:	ae 83       	std	Y+6, r26	; 0x06
     5ee:	bf 83       	std	Y+7, r27	; 0x07
				average = total/ count;
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	cc 01       	movw	r24, r24
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	bc 01       	movw	r22, r24
     5fc:	cd 01       	movw	r24, r26
     5fe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__floatunsisf>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	6c 81       	ldd	r22, Y+4	; 0x04
     608:	7d 81       	ldd	r23, Y+5	; 0x05
     60a:	8e 81       	ldd	r24, Y+6	; 0x06
     60c:	9f 81       	ldd	r25, Y+7	; 0x07
     60e:	0e 94 49 07 	call	0xe92	; 0xe92 <__divsf3>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	88 87       	std	Y+8, r24	; 0x08
     618:	99 87       	std	Y+9, r25	; 0x09
     61a:	aa 87       	std	Y+10, r26	; 0x0a
     61c:	bb 87       	std	Y+11, r27	; 0x0b
				print_average(average);
     61e:	88 85       	ldd	r24, Y+8	; 0x08
     620:	99 85       	ldd	r25, Y+9	; 0x09
     622:	aa 85       	ldd	r26, Y+10	; 0x0a
     624:	bb 85       	ldd	r27, Y+11	; 0x0b
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <print_average>
				
				if(voltage > max)
     62e:	6c 89       	ldd	r22, Y+20	; 0x14
     630:	7d 89       	ldd	r23, Y+21	; 0x15
     632:	8e 89       	ldd	r24, Y+22	; 0x16
     634:	9f 89       	ldd	r25, Y+23	; 0x17
     636:	28 89       	ldd	r18, Y+16	; 0x10
     638:	39 89       	ldd	r19, Y+17	; 0x11
     63a:	4a 89       	ldd	r20, Y+18	; 0x12
     63c:	5b 89       	ldd	r21, Y+19	; 0x13
     63e:	0e 94 94 08 	call	0x1128	; 0x1128 <__gesf2>
     642:	18 16       	cp	r1, r24
     644:	84 f4       	brge	.+32     	; 0x666 <main+0x1a6>
				{
					max = voltage;
     646:	8c 89       	ldd	r24, Y+20	; 0x14
     648:	9d 89       	ldd	r25, Y+21	; 0x15
     64a:	ae 89       	ldd	r26, Y+22	; 0x16
     64c:	bf 89       	ldd	r27, Y+23	; 0x17
     64e:	88 8b       	std	Y+16, r24	; 0x10
     650:	99 8b       	std	Y+17, r25	; 0x11
     652:	aa 8b       	std	Y+18, r26	; 0x12
     654:	bb 8b       	std	Y+19, r27	; 0x13
					print_max(max);
     656:	88 89       	ldd	r24, Y+16	; 0x10
     658:	99 89       	ldd	r25, Y+17	; 0x11
     65a:	aa 89       	ldd	r26, Y+18	; 0x12
     65c:	bb 89       	ldd	r27, Y+19	; 0x13
     65e:	bc 01       	movw	r22, r24
     660:	cd 01       	movw	r24, r26
     662:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <print_max>
				}
				if(voltage < min)
     666:	6c 89       	ldd	r22, Y+20	; 0x14
     668:	7d 89       	ldd	r23, Y+21	; 0x15
     66a:	8e 89       	ldd	r24, Y+22	; 0x16
     66c:	9f 89       	ldd	r25, Y+23	; 0x17
     66e:	2c 85       	ldd	r18, Y+12	; 0x0c
     670:	3d 85       	ldd	r19, Y+13	; 0x0d
     672:	4e 85       	ldd	r20, Y+14	; 0x0e
     674:	5f 85       	ldd	r21, Y+15	; 0x0f
     676:	0e 94 45 07 	call	0xe8a	; 0xe8a <__cmpsf2>
     67a:	88 23       	and	r24, r24
     67c:	84 f4       	brge	.+32     	; 0x69e <main+0x1de>
				{
					min = voltage;
     67e:	8c 89       	ldd	r24, Y+20	; 0x14
     680:	9d 89       	ldd	r25, Y+21	; 0x15
     682:	ae 89       	ldd	r26, Y+22	; 0x16
     684:	bf 89       	ldd	r27, Y+23	; 0x17
     686:	8c 87       	std	Y+12, r24	; 0x0c
     688:	9d 87       	std	Y+13, r25	; 0x0d
     68a:	ae 87       	std	Y+14, r26	; 0x0e
     68c:	bf 87       	std	Y+15, r27	; 0x0f
					print_min(min);
     68e:	8c 85       	ldd	r24, Y+12	; 0x0c
     690:	9d 85       	ldd	r25, Y+13	; 0x0d
     692:	ae 85       	ldd	r26, Y+14	; 0x0e
     694:	bf 85       	ldd	r27, Y+15	; 0x0f
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <print_min>
				if(!ADIF)
				{
					SET_BIT(ADCSRA, 4); //ADIF (AD Interrupt flag)
				}
				// C = STOP
				if(get_key() == 5)
     69e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_key>
     6a2:	85 30       	cpi	r24, 0x05	; 5
     6a4:	91 05       	cpc	r25, r1
     6a6:	11 f4       	brne	.+4      	; 0x6ac <main+0x1ec>
				{
					start = 0;
     6a8:	1b 82       	std	Y+3, r1	; 0x03
     6aa:	55 c0       	rjmp	.+170    	; 0x756 <main+0x296>
				}
				// B = RESET
				else if(get_key() == 9)
     6ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_key>
     6b0:	89 30       	cpi	r24, 0x09	; 9
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <main+0x1f8>
     6b6:	4f c0       	rjmp	.+158    	; 0x756 <main+0x296>
				{
					start = 0;
     6b8:	1b 82       	std	Y+3, r1	; 0x03
					count = 0;
     6ba:	1a 82       	std	Y+2, r1	; 0x02
     6bc:	19 82       	std	Y+1, r1	; 0x01
					total = 0.00;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	8c 83       	std	Y+4, r24	; 0x04
     6c8:	9d 83       	std	Y+5, r25	; 0x05
     6ca:	ae 83       	std	Y+6, r26	; 0x06
     6cc:	bf 83       	std	Y+7, r27	; 0x07
					voltage = 0.00;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	8c 8b       	std	Y+20, r24	; 0x14
     6d8:	9d 8b       	std	Y+21, r25	; 0x15
     6da:	ae 8b       	std	Y+22, r26	; 0x16
     6dc:	bf 8b       	std	Y+23, r27	; 0x17
					max = 0.00;
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	a0 e0       	ldi	r26, 0x00	; 0
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	88 8b       	std	Y+16, r24	; 0x10
     6e8:	99 8b       	std	Y+17, r25	; 0x11
     6ea:	aa 8b       	std	Y+18, r26	; 0x12
     6ec:	bb 8b       	std	Y+19, r27	; 0x13
					min = 6.00; 
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	a0 ec       	ldi	r26, 0xC0	; 192
     6f4:	b0 e4       	ldi	r27, 0x40	; 64
     6f6:	8c 87       	std	Y+12, r24	; 0x0c
     6f8:	9d 87       	std	Y+13, r25	; 0x0d
     6fa:	ae 87       	std	Y+14, r26	; 0x0e
     6fc:	bf 87       	std	Y+15, r27	; 0x0f
					average = 0.00;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	a0 e0       	ldi	r26, 0x00	; 0
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	88 87       	std	Y+8, r24	; 0x08
     708:	99 87       	std	Y+9, r25	; 0x09
     70a:	aa 87       	std	Y+10, r26	; 0x0a
     70c:	bb 87       	std	Y+11, r27	; 0x0b
					c_tenths = 0;
     70e:	10 92 67 00 	sts	0x0067, r1
     712:	10 92 66 00 	sts	0x0066, r1
					c_hundredths = 0;
     716:	10 92 69 00 	sts	0x0069, r1
     71a:	10 92 68 00 	sts	0x0068, r1
					min_tenths = 0;
     71e:	10 92 6b 00 	sts	0x006B, r1
     722:	10 92 6a 00 	sts	0x006A, r1
					min_hundredths = 0;
     726:	10 92 6d 00 	sts	0x006D, r1
     72a:	10 92 6c 00 	sts	0x006C, r1
					max_tenths = 0;
     72e:	10 92 6f 00 	sts	0x006F, r1
     732:	10 92 6e 00 	sts	0x006E, r1
					max_hundredths = 0;
     736:	10 92 71 00 	sts	0x0071, r1
     73a:	10 92 70 00 	sts	0x0070, r1
					a_tenths = 0;
     73e:	10 92 73 00 	sts	0x0073, r1
     742:	10 92 72 00 	sts	0x0072, r1
					a_hundredths = 0;
     746:	10 92 75 00 	sts	0x0075, r1
     74a:	10 92 74 00 	sts	0x0074, r1
					clr_lcd();
     74e:	0e 94 42 05 	call	0xa84	; 0xa84 <clr_lcd>
					print_initial();
     752:	0e 94 49 00 	call	0x92	; 0x92 <print_initial>
				}
				wait_avr(500);	
     756:	84 ef       	ldi	r24, 0xF4	; 244
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 19 04 	call	0x832	; 0x832 <wait_avr>
	{
		// A = START
		if (get_key() == 13)
		{
			start = 1;
			while(start){
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	88 23       	and	r24, r24
     762:	09 f0       	breq	.+2      	; 0x766 <main+0x2a6>
     764:	f1 ce       	rjmp	.-542    	; 0x548 <main+0x88>
     766:	55 c0       	rjmp	.+170    	; 0x812 <main+0x352>
					print_initial();
				}
				wait_avr(500);	
			}
		}
		else if (get_key() == 9) // B = CLEAR
     768:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_key>
     76c:	89 30       	cpi	r24, 0x09	; 9
     76e:	91 05       	cpc	r25, r1
     770:	09 f0       	breq	.+2      	; 0x774 <main+0x2b4>
     772:	4f c0       	rjmp	.+158    	; 0x812 <main+0x352>
		{
			start = 0;
     774:	1b 82       	std	Y+3, r1	; 0x03
			count = 0;
     776:	1a 82       	std	Y+2, r1	; 0x02
     778:	19 82       	std	Y+1, r1	; 0x01
			total = 0.00;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e0       	ldi	r26, 0x00	; 0
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	8c 83       	std	Y+4, r24	; 0x04
     784:	9d 83       	std	Y+5, r25	; 0x05
     786:	ae 83       	std	Y+6, r26	; 0x06
     788:	bf 83       	std	Y+7, r27	; 0x07
			voltage = 0.00;
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a0 e0       	ldi	r26, 0x00	; 0
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	8c 8b       	std	Y+20, r24	; 0x14
     794:	9d 8b       	std	Y+21, r25	; 0x15
     796:	ae 8b       	std	Y+22, r26	; 0x16
     798:	bf 8b       	std	Y+23, r27	; 0x17
			max = 0.00;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	a0 e0       	ldi	r26, 0x00	; 0
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	88 8b       	std	Y+16, r24	; 0x10
     7a4:	99 8b       	std	Y+17, r25	; 0x11
     7a6:	aa 8b       	std	Y+18, r26	; 0x12
     7a8:	bb 8b       	std	Y+19, r27	; 0x13
			min = 6.00; 
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	a0 ec       	ldi	r26, 0xC0	; 192
     7b0:	b0 e4       	ldi	r27, 0x40	; 64
     7b2:	8c 87       	std	Y+12, r24	; 0x0c
     7b4:	9d 87       	std	Y+13, r25	; 0x0d
     7b6:	ae 87       	std	Y+14, r26	; 0x0e
     7b8:	bf 87       	std	Y+15, r27	; 0x0f
			average = 0.00;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	88 87       	std	Y+8, r24	; 0x08
     7c4:	99 87       	std	Y+9, r25	; 0x09
     7c6:	aa 87       	std	Y+10, r26	; 0x0a
     7c8:	bb 87       	std	Y+11, r27	; 0x0b
			c_tenths = 0;
     7ca:	10 92 67 00 	sts	0x0067, r1
     7ce:	10 92 66 00 	sts	0x0066, r1
			c_hundredths = 0;
     7d2:	10 92 69 00 	sts	0x0069, r1
     7d6:	10 92 68 00 	sts	0x0068, r1
			min_tenths = 0;
     7da:	10 92 6b 00 	sts	0x006B, r1
     7de:	10 92 6a 00 	sts	0x006A, r1
			min_hundredths = 0;
     7e2:	10 92 6d 00 	sts	0x006D, r1
     7e6:	10 92 6c 00 	sts	0x006C, r1
			max_tenths = 0;
     7ea:	10 92 6f 00 	sts	0x006F, r1
     7ee:	10 92 6e 00 	sts	0x006E, r1
			max_hundredths = 0;
     7f2:	10 92 71 00 	sts	0x0071, r1
     7f6:	10 92 70 00 	sts	0x0070, r1
			a_tenths = 0;
     7fa:	10 92 73 00 	sts	0x0073, r1
     7fe:	10 92 72 00 	sts	0x0072, r1
			a_hundredths = 0;
     802:	10 92 75 00 	sts	0x0075, r1
     806:	10 92 74 00 	sts	0x0074, r1
			clr_lcd();
     80a:	0e 94 42 05 	call	0xa84	; 0xa84 <clr_lcd>
			print_initial();
     80e:	0e 94 49 00 	call	0x92	; 0x92 <print_initial>
		}	
		wait_avr(50);
     812:	82 e3       	ldi	r24, 0x32	; 50
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 19 04 	call	0x832	; 0x832 <wait_avr>
     81a:	8d ce       	rjmp	.-742    	; 0x536 <main+0x76>

0000081c <ini_avr>:
#include "avr.h"

void ini_avr(void)
{
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
  WDTCR = 15;
     824:	e1 e4       	ldi	r30, 0x41	; 65
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	8f e0       	ldi	r24, 0x0F	; 15
     82a:	80 83       	st	Z, r24
}
     82c:	cf 91       	pop	r28
     82e:	df 91       	pop	r29
     830:	08 95       	ret

00000832 <wait_avr>:


void wait_avr(unsigned short msec)
{
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	00 d0       	rcall	.+0      	; 0x838 <wait_avr+0x6>
     838:	0f 92       	push	r0
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	89 83       	std	Y+1, r24	; 0x01
  TCCR0 = 2;
     842:	e3 e5       	ldi	r30, 0x53	; 83
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	80 83       	st	Z, r24
     84a:	14 c0       	rjmp	.+40     	; 0x874 <__stack+0x15>
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.001);
     84c:	e2 e5       	ldi	r30, 0x52	; 82
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	10 82       	st	Z, r1
    SET_BIT(TIFR, TOV0);
     852:	a8 e5       	ldi	r26, 0x58	; 88
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	e8 e5       	ldi	r30, 0x58	; 88
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	8c 93       	st	X, r24
    WDR();
     860:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
     862:	e8 e5       	ldi	r30, 0x58	; 88
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	88 2f       	mov	r24, r24
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	81 70       	andi	r24, 0x01	; 1
     86e:	90 70       	andi	r25, 0x00	; 0
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	b9 f3       	breq	.-18     	; 0x862 <__stack+0x3>


void wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
     874:	1b 82       	std	Y+3, r1	; 0x03
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	11 f0       	breq	.+4      	; 0x882 <__stack+0x23>
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	88 23       	and	r24, r24
     890:	e9 f6       	brne	.-70     	; 0x84c <wait_avr+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
     892:	e3 e5       	ldi	r30, 0x53	; 83
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	10 82       	st	Z, r1
}
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	cf 91       	pop	r28
     8a0:	df 91       	pop	r29
     8a2:	08 95       	ret

000008a4 <input>:
  NOP();
}

static unsigned char
input(unsigned char rs)
{
     8a4:	df 93       	push	r29
     8a6:	cf 93       	push	r28
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <input+0x6>
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	88 23       	and	r24, r24
     8b4:	41 f0       	breq	.+16     	; 0x8c6 <input+0x22>
     8b6:	a8 e3       	ldi	r26, 0x38	; 56
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e8 e3       	ldi	r30, 0x38	; 56
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	82 60       	ori	r24, 0x02	; 2
     8c2:	8c 93       	st	X, r24
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <input+0x30>
     8c6:	a8 e3       	ldi	r26, 0x38	; 56
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	e8 e3       	ldi	r30, 0x38	; 56
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	8d 7f       	andi	r24, 0xFD	; 253
     8d2:	8c 93       	st	X, r24
  SET_BIT(PORT, RW_PIN);
     8d4:	a8 e3       	ldi	r26, 0x38	; 56
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e8 e3       	ldi	r30, 0x38	; 56
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	84 60       	ori	r24, 0x04	; 4
     8e0:	8c 93       	st	X, r24
  get_data();
     8e2:	0e 94 96 04 	call	0x92c	; 0x92c <get_data>
  SET_BIT(PORT, EN_PIN);
     8e6:	a8 e3       	ldi	r26, 0x38	; 56
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e8 e3       	ldi	r30, 0x38	; 56
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	88 60       	ori	r24, 0x08	; 8
     8f2:	8c 93       	st	X, r24
  sleep_700ns();
     8f4:	0e 94 8c 04 	call	0x918	; 0x918 <sleep_700ns>
  d = get_data();
     8f8:	0e 94 96 04 	call	0x92c	; 0x92c <get_data>
     8fc:	89 83       	std	Y+1, r24	; 0x01
  CLR_BIT(PORT, EN_PIN);
     8fe:	a8 e3       	ldi	r26, 0x38	; 56
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	e8 e3       	ldi	r30, 0x38	; 56
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	87 7f       	andi	r24, 0xF7	; 247
     90a:	8c 93       	st	X, r24
  return d;
     90c:	89 81       	ldd	r24, Y+1	; 0x01
}
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	08 95       	ret

00000918 <sleep_700ns>:
  return PIND;
}

static inline void
sleep_700ns(void)
{
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
  NOP();
     920:	00 00       	nop
  NOP();
     922:	00 00       	nop
  NOP();
     924:	00 00       	nop
}
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <get_data>:
  DDRD = 0xff;
}

static inline unsigned char
get_data(void)
{
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
  DDRD = 0x00;
     934:	e1 e3       	ldi	r30, 0x31	; 49
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	10 82       	st	Z, r1
  return PIND;
     93a:	e0 e3       	ldi	r30, 0x30	; 48
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
}
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	08 95       	ret

00000946 <output>:
  return d;
}

static void
output(unsigned char d, unsigned char rs)
{
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	00 d0       	rcall	.+0      	; 0x94c <output+0x6>
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	6a 83       	std	Y+2, r22	; 0x02
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	88 23       	and	r24, r24
     958:	41 f0       	breq	.+16     	; 0x96a <output+0x24>
     95a:	a8 e3       	ldi	r26, 0x38	; 56
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e8 e3       	ldi	r30, 0x38	; 56
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	82 60       	ori	r24, 0x02	; 2
     966:	8c 93       	st	X, r24
     968:	07 c0       	rjmp	.+14     	; 0x978 <output+0x32>
     96a:	a8 e3       	ldi	r26, 0x38	; 56
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	e8 e3       	ldi	r30, 0x38	; 56
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	8d 7f       	andi	r24, 0xFD	; 253
     976:	8c 93       	st	X, r24
  CLR_BIT(PORT, RW_PIN);
     978:	a8 e3       	ldi	r26, 0x38	; 56
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e8 e3       	ldi	r30, 0x38	; 56
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	8b 7f       	andi	r24, 0xFB	; 251
     984:	8c 93       	st	X, r24
  set_data(d);
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_data>
  SET_BIT(PORT, EN_PIN);
     98c:	a8 e3       	ldi	r26, 0x38	; 56
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e8 e3       	ldi	r30, 0x38	; 56
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	88 60       	ori	r24, 0x08	; 8
     998:	8c 93       	st	X, r24
  sleep_700ns();
     99a:	0e 94 8c 04 	call	0x918	; 0x918 <sleep_700ns>
  CLR_BIT(PORT, EN_PIN);
     99e:	a8 e3       	ldi	r26, 0x38	; 56
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	e8 e3       	ldi	r30, 0x38	; 56
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	87 7f       	andi	r24, 0xF7	; 247
     9aa:	8c 93       	st	X, r24
}
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	cf 91       	pop	r28
     9b2:	df 91       	pop	r29
     9b4:	08 95       	ret

000009b6 <set_data>:
#define RW_PIN  2
#define EN_PIN  3

static inline void
set_data(unsigned char x)
{
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	0f 92       	push	r0
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	89 83       	std	Y+1, r24	; 0x01
  PORTD = x;
     9c2:	e2 e3       	ldi	r30, 0x32	; 50
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	80 83       	st	Z, r24
  DDRD = 0xff;
     9ca:	e1 e3       	ldi	r30, 0x31	; 49
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	80 83       	st	Z, r24
}
     9d2:	0f 90       	pop	r0
     9d4:	cf 91       	pop	r28
     9d6:	df 91       	pop	r29
     9d8:	08 95       	ret

000009da <write>:
  CLR_BIT(PORT, EN_PIN);
}

static void
write(unsigned char c, unsigned char rs)
{
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <write+0x6>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	6a 83       	std	Y+2, r22	; 0x02
  while (input(0) & 0x80);
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 52 04 	call	0x8a4	; 0x8a4 <input>
     9ee:	88 23       	and	r24, r24
     9f0:	dc f3       	brlt	.-10     	; 0x9e8 <write+0xe>
  output(c, rs);
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	6a 81       	ldd	r22, Y+2	; 0x02
     9f6:	0e 94 a3 04 	call	0x946	; 0x946 <output>
}
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	08 95       	ret

00000a04 <ini_lcd>:

void
ini_lcd(void)
{
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(DDR, RS_PIN);
     a0c:	a7 e3       	ldi	r26, 0x37	; 55
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e7 e3       	ldi	r30, 0x37	; 55
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	8c 93       	st	X, r24
  SET_BIT(DDR, RW_PIN);
     a1a:	a7 e3       	ldi	r26, 0x37	; 55
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e7 e3       	ldi	r30, 0x37	; 55
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	84 60       	ori	r24, 0x04	; 4
     a26:	8c 93       	st	X, r24
  SET_BIT(DDR, EN_PIN);
     a28:	a7 e3       	ldi	r26, 0x37	; 55
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	e7 e3       	ldi	r30, 0x37	; 55
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	88 60       	ori	r24, 0x08	; 8
     a34:	8c 93       	st	X, r24
  wait_avr(16);
     a36:	80 e1       	ldi	r24, 0x10	; 16
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 19 04 	call	0x832	; 0x832 <wait_avr>
  output(0x30, 0);
     a3e:	80 e3       	ldi	r24, 0x30	; 48
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	0e 94 a3 04 	call	0x946	; 0x946 <output>
  wait_avr(5);
     a46:	85 e0       	ldi	r24, 0x05	; 5
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 19 04 	call	0x832	; 0x832 <wait_avr>
  output(0x30, 0);
     a4e:	80 e3       	ldi	r24, 0x30	; 48
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	0e 94 a3 04 	call	0x946	; 0x946 <output>
  wait_avr(1);
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 19 04 	call	0x832	; 0x832 <wait_avr>
  write(0x3c, 0);
     a5e:	8c e3       	ldi	r24, 0x3C	; 60
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
  write(0x0c, 0);
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
  write(0x06, 0);
     a6e:	86 e0       	ldi	r24, 0x06	; 6
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
  write(0x01, 0);
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
}
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	08 95       	ret

00000a84 <clr_lcd>:

void
clr_lcd(void)
{
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
  write(0x01, 0);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
}
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <pos_lcd>:

void
pos_lcd(unsigned char r, unsigned char c)
{
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <pos_lcd+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <pos_lcd+0x8>
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	8a 83       	std	Y+2, r24	; 0x02
     aa8:	6b 83       	std	Y+3, r22	; 0x03
  unsigned char n = r * 40 + c;
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9c 01       	movw	r18, r24
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	c9 01       	movw	r24, r18
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	82 0f       	add	r24, r18
     aca:	93 1f       	adc	r25, r19
     acc:	98 2f       	mov	r25, r24
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	89 0f       	add	r24, r25
     ad2:	89 83       	std	Y+1, r24	; 0x01
  write(0x02, 0);
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <pos_lcd+0x4c>
  while (n--) {
    write(0x14, 0);
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	8c 83       	std	Y+4, r24	; 0x04
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	88 23       	and	r24, r24
     aee:	11 f0       	breq	.+4      	; 0xaf4 <pos_lcd+0x5a>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8c 83       	std	Y+4, r24	; 0x04
     af4:	8c 81       	ldd	r24, Y+4	; 0x04
     af6:	99 81       	ldd	r25, Y+1	; 0x01
     af8:	91 50       	subi	r25, 0x01	; 1
     afa:	99 83       	std	Y+1, r25	; 0x01
     afc:	88 23       	and	r24, r24
     afe:	79 f7       	brne	.-34     	; 0xade <pos_lcd+0x44>
    write(0x14, 0);
  }
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	cf 91       	pop	r28
     b0a:	df 91       	pop	r29
     b0c:	08 95       	ret

00000b0e <put_lcd>:

void
put_lcd(char c)
{
     b0e:	df 93       	push	r29
     b10:	cf 93       	push	r28
     b12:	0f 92       	push	r0
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	89 83       	std	Y+1, r24	; 0x01
  write(c, 1);
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
}
     b22:	0f 90       	pop	r0
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <put_const_str_lcd>:

void
put_const_str_lcd(const char *s)
{
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <put_const_str_lcd+0x6>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <put_const_str_lcd+0x8>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <put_const_str_lcd+0xa>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	9e 83       	std	Y+6, r25	; 0x06
     b3a:	8d 83       	std	Y+5, r24	; 0x05
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <put_const_str_lcd+0x1c>
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
    write(c, 1);
     b3e:	8c 81       	ldd	r24, Y+4	; 0x04
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	0e 94 ed 04 	call	0x9da	; 0x9da <write>

void
put_const_str_lcd(const char *s)
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
     b46:	8d 81       	ldd	r24, Y+5	; 0x05
     b48:	9e 81       	ldd	r25, Y+6	; 0x06
     b4a:	9b 83       	std	Y+3, r25	; 0x03
     b4c:	8a 83       	std	Y+2, r24	; 0x02
     b4e:	8d 81       	ldd	r24, Y+5	; 0x05
     b50:	9e 81       	ldd	r25, Y+6	; 0x06
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	9e 83       	std	Y+6, r25	; 0x06
     b56:	8d 83       	std	Y+5, r24	; 0x05
     b58:	ea 81       	ldd	r30, Y+2	; 0x02
     b5a:	fb 81       	ldd	r31, Y+3	; 0x03
     b5c:	84 91       	lpm	r24, Z+
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	8c 83       	std	Y+4, r24	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	88 23       	and	r24, r24
     b68:	51 f7       	brne	.-44     	; 0xb3e <put_const_str_lcd+0x14>
    write(c, 1);
  }
}
     b6a:	26 96       	adiw	r28, 0x06	; 6
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <put_str_lcd>:

void
put_str_lcd(const char *s)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <put_str_lcd+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <put_str_lcd+0x8>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9b 83       	std	Y+3, r25	; 0x03
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <put_str_lcd+0x1a>
  char c;
  while ((c = *(s++)) != 0) {
    write(c, 1);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 ed 04 	call	0x9da	; 0x9da <write>

void
put_str_lcd(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
     b96:	ea 81       	ldd	r30, Y+2	; 0x02
     b98:	fb 81       	ldd	r31, Y+3	; 0x03
     b9a:	80 81       	ld	r24, Z
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	8c 83       	std	Y+4, r24	; 0x04
     ba2:	8c 81       	ldd	r24, Y+4	; 0x04
     ba4:	88 23       	and	r24, r24
     ba6:	11 f0       	breq	.+4      	; 0xbac <put_str_lcd+0x30>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8c 83       	std	Y+4, r24	; 0x04
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	2a 81       	ldd	r18, Y+2	; 0x02
     bb0:	3b 81       	ldd	r19, Y+3	; 0x03
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	3b 83       	std	Y+3, r19	; 0x03
     bb8:	2a 83       	std	Y+2, r18	; 0x02
     bba:	88 23       	and	r24, r24
     bbc:	41 f7       	brne	.-48     	; 0xb8e <put_str_lcd+0x12>
    write(c, 1);
  }
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <pressed>:
#include "avr.h"
#include "keypad.h"

unsigned char pressed(int l, int k){
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	29 97       	sbiw	r28, 0x09	; 9
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	9e 83       	std	Y+6, r25	; 0x06
     be2:	8d 83       	std	Y+5, r24	; 0x05
     be4:	78 87       	std	Y+8, r23	; 0x08
     be6:	6f 83       	std	Y+7, r22	; 0x07
	for(int j = 0; j < 4; j++){
     be8:	1c 82       	std	Y+4, r1	; 0x04
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	26 c0       	rjmp	.+76     	; 0xc3a <pressed+0x6e>
		CLR_BIT(DDRC, j); //input
     bee:	a4 e3       	ldi	r26, 0x34	; 52
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e4 e3       	ldi	r30, 0x34	; 52
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	28 2f       	mov	r18, r24
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0b 80       	ldd	r0, Y+3	; 0x03
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <pressed+0x3a>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <pressed+0x36>
     c0a:	80 95       	com	r24
     c0c:	82 23       	and	r24, r18
     c0e:	8c 93       	st	X, r24
		SET_BIT(PORTC, j); //initialized columns to 0
     c10:	a5 e3       	ldi	r26, 0x35	; 53
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e5 e3       	ldi	r30, 0x35	; 53
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	28 2f       	mov	r18, r24
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0b 80       	ldd	r0, Y+3	; 0x03
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <pressed+0x5c>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <pressed+0x58>
     c2c:	82 2b       	or	r24, r18
     c2e:	8c 93       	st	X, r24
#include "avr.h"
#include "keypad.h"

unsigned char pressed(int l, int k){
	for(int j = 0; j < 4; j++){
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	91 05       	cpc	r25, r1
     c42:	ac f2       	brlt	.-86     	; 0xbee <pressed+0x22>
		CLR_BIT(DDRC, j); //input
		SET_BIT(PORTC, j); //initialized columns to 0
	}
	
	//Rows
	for(int i = 4; i < 8; i++){
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	25 c0       	rjmp	.+74     	; 0xc98 <pressed+0xcc>
		SET_BIT(DDRC, i); //output
     c4e:	a4 e3       	ldi	r26, 0x34	; 52
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e4 e3       	ldi	r30, 0x34	; 52
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	28 2f       	mov	r18, r24
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	09 80       	ldd	r0, Y+1	; 0x01
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <pressed+0x9a>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <pressed+0x96>
     c6a:	82 2b       	or	r24, r18
     c6c:	8c 93       	st	X, r24
		SET_BIT(PORTC, i);
     c6e:	a5 e3       	ldi	r26, 0x35	; 53
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e5 e3       	ldi	r30, 0x35	; 53
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	28 2f       	mov	r18, r24
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	09 80       	ldd	r0, Y+1	; 0x01
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <pressed+0xba>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <pressed+0xb6>
     c8a:	82 2b       	or	r24, r18
     c8c:	8c 93       	st	X, r24
		CLR_BIT(DDRC, j); //input
		SET_BIT(PORTC, j); //initialized columns to 0
	}
	
	//Rows
	for(int i = 4; i < 8; i++){
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	88 30       	cpi	r24, 0x08	; 8
     c9e:	91 05       	cpc	r25, r1
     ca0:	b4 f2       	brlt	.-84     	; 0xc4e <pressed+0x82>
		SET_BIT(DDRC, i); //output
		SET_BIT(PORTC, i);
	}
	
	CLR_BIT(PORTC, k); //set row k to low
     ca2:	a5 e3       	ldi	r26, 0x35	; 53
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e5 e3       	ldi	r30, 0x35	; 53
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	28 2f       	mov	r18, r24
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0f 80       	ldd	r0, Y+7	; 0x07
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <pressed+0xee>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <pressed+0xea>
     cbe:	80 95       	com	r24
     cc0:	82 23       	and	r24, r18
     cc2:	8c 93       	st	X, r24
	
	if(GET_BIT(PINC, l) || GET_BIT(PINC, k)){ 
     cc4:	e3 e3       	ldi	r30, 0x33	; 51
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0d 80       	ldd	r0, Y+5	; 0x05
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <pressed+0x10a>
     cd2:	95 95       	asr	r25
     cd4:	87 95       	ror	r24
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <pressed+0x106>
     cda:	81 70       	andi	r24, 0x01	; 1
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	88 23       	and	r24, r24
     ce0:	79 f4       	brne	.+30     	; 0xd00 <pressed+0x134>
     ce2:	e3 e3       	ldi	r30, 0x33	; 51
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0f 80       	ldd	r0, Y+7	; 0x07
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <pressed+0x128>
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <pressed+0x124>
     cf8:	81 70       	andi	r24, 0x01	; 1
     cfa:	90 70       	andi	r25, 0x00	; 0
     cfc:	88 23       	and	r24, r24
     cfe:	11 f0       	breq	.+4      	; 0xd04 <pressed+0x138>
		return 0; //not pressed
     d00:	19 86       	std	Y+9, r1	; 0x09
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <pressed+0x13c>
	}
	else{
		return 1; //pressed
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 87       	std	Y+9, r24	; 0x09
     d08:	89 85       	ldd	r24, Y+9	; 0x09
	}
	
}
     d0a:	29 96       	adiw	r28, 0x09	; 9
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <get_key>:

int get_key(void){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
	int i;
	int j;
	int k = 0;
     d30:	1a 82       	std	Y+2, r1	; 0x02
     d32:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < 4; i++) //row
     d34:	1e 82       	std	Y+6, r1	; 0x06
     d36:	1d 82       	std	Y+5, r1	; 0x05
     d38:	31 c0       	rjmp	.+98     	; 0xd9c <get_key+0x80>
	{
		k = i + 4;
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	04 96       	adiw	r24, 0x04	; 4
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
		
		for(j = 0; j < 4; j++){ //column
     d44:	1c 82       	std	Y+4, r1	; 0x04
     d46:	1b 82       	std	Y+3, r1	; 0x03
     d48:	1f c0       	rjmp	.+62     	; 0xd88 <get_key+0x6c>
	
			if(pressed(j,k)){
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	29 81       	ldd	r18, Y+1	; 0x01
     d50:	3a 81       	ldd	r19, Y+2	; 0x02
     d52:	b9 01       	movw	r22, r18
     d54:	0e 94 e6 05 	call	0xbcc	; 0xbcc <pressed>
     d58:	88 23       	and	r24, r24
     d5a:	89 f0       	breq	.+34     	; 0xd7e <get_key+0x62>
				return (i * 4) + j + 1;
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	9c 01       	movw	r18, r24
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	9c 01       	movw	r18, r24
     d74:	2f 5f       	subi	r18, 0xFF	; 255
     d76:	3f 4f       	sbci	r19, 0xFF	; 255
     d78:	38 87       	std	Y+8, r19	; 0x08
     d7a:	2f 83       	std	Y+7, r18	; 0x07
     d7c:	16 c0       	rjmp	.+44     	; 0xdaa <get_key+0x8e>
	int k = 0;
	for(i = 0; i < 4; i++) //row
	{
		k = i + 4;
		
		for(j = 0; j < 4; j++){ //column
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	91 05       	cpc	r25, r1
     d90:	e4 f2       	brlt	.-72     	; 0xd4a <get_key+0x2e>

int get_key(void){
	int i;
	int j;
	int k = 0;
	for(i = 0; i < 4; i++) //row
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	91 05       	cpc	r25, r1
     da4:	54 f2       	brlt	.-108    	; 0xd3a <get_key+0x1e>
			if(pressed(j,k)){
				return (i * 4) + j + 1;
			}
		}
	}
	return 0;
     da6:	18 86       	std	Y+8, r1	; 0x08
     da8:	1f 82       	std	Y+7, r1	; 0x07
     daa:	8f 81       	ldd	r24, Y+7	; 0x07
     dac:	98 85       	ldd	r25, Y+8	; 0x08
     dae:	28 96       	adiw	r28, 0x08	; 8
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <__subsf3>:
     dc0:	50 58       	subi	r21, 0x80	; 128

00000dc2 <__addsf3>:
     dc2:	bb 27       	eor	r27, r27
     dc4:	aa 27       	eor	r26, r26
     dc6:	0e d0       	rcall	.+28     	; 0xde4 <__addsf3x>
     dc8:	75 c1       	rjmp	.+746    	; 0x10b4 <__fp_round>
     dca:	66 d1       	rcall	.+716    	; 0x1098 <__fp_pscA>
     dcc:	30 f0       	brcs	.+12     	; 0xdda <__addsf3+0x18>
     dce:	6b d1       	rcall	.+726    	; 0x10a6 <__fp_pscB>
     dd0:	20 f0       	brcs	.+8      	; 0xdda <__addsf3+0x18>
     dd2:	31 f4       	brne	.+12     	; 0xde0 <__addsf3+0x1e>
     dd4:	9f 3f       	cpi	r25, 0xFF	; 255
     dd6:	11 f4       	brne	.+4      	; 0xddc <__addsf3+0x1a>
     dd8:	1e f4       	brtc	.+6      	; 0xde0 <__addsf3+0x1e>
     dda:	5b c1       	rjmp	.+694    	; 0x1092 <__fp_nan>
     ddc:	0e f4       	brtc	.+2      	; 0xde0 <__addsf3+0x1e>
     dde:	e0 95       	com	r30
     de0:	e7 fb       	bst	r30, 7
     de2:	51 c1       	rjmp	.+674    	; 0x1086 <__fp_inf>

00000de4 <__addsf3x>:
     de4:	e9 2f       	mov	r30, r25
     de6:	77 d1       	rcall	.+750    	; 0x10d6 <__fp_split3>
     de8:	80 f3       	brcs	.-32     	; 0xdca <__addsf3+0x8>
     dea:	ba 17       	cp	r27, r26
     dec:	62 07       	cpc	r22, r18
     dee:	73 07       	cpc	r23, r19
     df0:	84 07       	cpc	r24, r20
     df2:	95 07       	cpc	r25, r21
     df4:	18 f0       	brcs	.+6      	; 0xdfc <__addsf3x+0x18>
     df6:	71 f4       	brne	.+28     	; 0xe14 <__addsf3x+0x30>
     df8:	9e f5       	brtc	.+102    	; 0xe60 <__addsf3x+0x7c>
     dfa:	8f c1       	rjmp	.+798    	; 0x111a <__fp_zero>
     dfc:	0e f4       	brtc	.+2      	; 0xe00 <__addsf3x+0x1c>
     dfe:	e0 95       	com	r30
     e00:	0b 2e       	mov	r0, r27
     e02:	ba 2f       	mov	r27, r26
     e04:	a0 2d       	mov	r26, r0
     e06:	0b 01       	movw	r0, r22
     e08:	b9 01       	movw	r22, r18
     e0a:	90 01       	movw	r18, r0
     e0c:	0c 01       	movw	r0, r24
     e0e:	ca 01       	movw	r24, r20
     e10:	a0 01       	movw	r20, r0
     e12:	11 24       	eor	r1, r1
     e14:	ff 27       	eor	r31, r31
     e16:	59 1b       	sub	r21, r25
     e18:	99 f0       	breq	.+38     	; 0xe40 <__addsf3x+0x5c>
     e1a:	59 3f       	cpi	r21, 0xF9	; 249
     e1c:	50 f4       	brcc	.+20     	; 0xe32 <__addsf3x+0x4e>
     e1e:	50 3e       	cpi	r21, 0xE0	; 224
     e20:	68 f1       	brcs	.+90     	; 0xe7c <__addsf3x+0x98>
     e22:	1a 16       	cp	r1, r26
     e24:	f0 40       	sbci	r31, 0x00	; 0
     e26:	a2 2f       	mov	r26, r18
     e28:	23 2f       	mov	r18, r19
     e2a:	34 2f       	mov	r19, r20
     e2c:	44 27       	eor	r20, r20
     e2e:	58 5f       	subi	r21, 0xF8	; 248
     e30:	f3 cf       	rjmp	.-26     	; 0xe18 <__addsf3x+0x34>
     e32:	46 95       	lsr	r20
     e34:	37 95       	ror	r19
     e36:	27 95       	ror	r18
     e38:	a7 95       	ror	r26
     e3a:	f0 40       	sbci	r31, 0x00	; 0
     e3c:	53 95       	inc	r21
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <__addsf3x+0x4e>
     e40:	7e f4       	brtc	.+30     	; 0xe60 <__addsf3x+0x7c>
     e42:	1f 16       	cp	r1, r31
     e44:	ba 0b       	sbc	r27, r26
     e46:	62 0b       	sbc	r22, r18
     e48:	73 0b       	sbc	r23, r19
     e4a:	84 0b       	sbc	r24, r20
     e4c:	ba f0       	brmi	.+46     	; 0xe7c <__addsf3x+0x98>
     e4e:	91 50       	subi	r25, 0x01	; 1
     e50:	a1 f0       	breq	.+40     	; 0xe7a <__addsf3x+0x96>
     e52:	ff 0f       	add	r31, r31
     e54:	bb 1f       	adc	r27, r27
     e56:	66 1f       	adc	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	88 1f       	adc	r24, r24
     e5c:	c2 f7       	brpl	.-16     	; 0xe4e <__addsf3x+0x6a>
     e5e:	0e c0       	rjmp	.+28     	; 0xe7c <__addsf3x+0x98>
     e60:	ba 0f       	add	r27, r26
     e62:	62 1f       	adc	r22, r18
     e64:	73 1f       	adc	r23, r19
     e66:	84 1f       	adc	r24, r20
     e68:	48 f4       	brcc	.+18     	; 0xe7c <__addsf3x+0x98>
     e6a:	87 95       	ror	r24
     e6c:	77 95       	ror	r23
     e6e:	67 95       	ror	r22
     e70:	b7 95       	ror	r27
     e72:	f7 95       	ror	r31
     e74:	9e 3f       	cpi	r25, 0xFE	; 254
     e76:	08 f0       	brcs	.+2      	; 0xe7a <__addsf3x+0x96>
     e78:	b3 cf       	rjmp	.-154    	; 0xde0 <__addsf3+0x1e>
     e7a:	93 95       	inc	r25
     e7c:	88 0f       	add	r24, r24
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <__addsf3x+0x9e>
     e80:	99 27       	eor	r25, r25
     e82:	ee 0f       	add	r30, r30
     e84:	97 95       	ror	r25
     e86:	87 95       	ror	r24
     e88:	08 95       	ret

00000e8a <__cmpsf2>:
     e8a:	d9 d0       	rcall	.+434    	; 0x103e <__fp_cmp>
     e8c:	08 f4       	brcc	.+2      	; 0xe90 <__cmpsf2+0x6>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	08 95       	ret

00000e92 <__divsf3>:
     e92:	0c d0       	rcall	.+24     	; 0xeac <__divsf3x>
     e94:	0f c1       	rjmp	.+542    	; 0x10b4 <__fp_round>
     e96:	07 d1       	rcall	.+526    	; 0x10a6 <__fp_pscB>
     e98:	40 f0       	brcs	.+16     	; 0xeaa <__divsf3+0x18>
     e9a:	fe d0       	rcall	.+508    	; 0x1098 <__fp_pscA>
     e9c:	30 f0       	brcs	.+12     	; 0xeaa <__divsf3+0x18>
     e9e:	21 f4       	brne	.+8      	; 0xea8 <__divsf3+0x16>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	19 f0       	breq	.+6      	; 0xeaa <__divsf3+0x18>
     ea4:	f0 c0       	rjmp	.+480    	; 0x1086 <__fp_inf>
     ea6:	51 11       	cpse	r21, r1
     ea8:	39 c1       	rjmp	.+626    	; 0x111c <__fp_szero>
     eaa:	f3 c0       	rjmp	.+486    	; 0x1092 <__fp_nan>

00000eac <__divsf3x>:
     eac:	14 d1       	rcall	.+552    	; 0x10d6 <__fp_split3>
     eae:	98 f3       	brcs	.-26     	; 0xe96 <__divsf3+0x4>

00000eb0 <__divsf3_pse>:
     eb0:	99 23       	and	r25, r25
     eb2:	c9 f3       	breq	.-14     	; 0xea6 <__divsf3+0x14>
     eb4:	55 23       	and	r21, r21
     eb6:	b1 f3       	breq	.-20     	; 0xea4 <__divsf3+0x12>
     eb8:	95 1b       	sub	r25, r21
     eba:	55 0b       	sbc	r21, r21
     ebc:	bb 27       	eor	r27, r27
     ebe:	aa 27       	eor	r26, r26
     ec0:	62 17       	cp	r22, r18
     ec2:	73 07       	cpc	r23, r19
     ec4:	84 07       	cpc	r24, r20
     ec6:	38 f0       	brcs	.+14     	; 0xed6 <__divsf3_pse+0x26>
     ec8:	9f 5f       	subi	r25, 0xFF	; 255
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	22 0f       	add	r18, r18
     ece:	33 1f       	adc	r19, r19
     ed0:	44 1f       	adc	r20, r20
     ed2:	aa 1f       	adc	r26, r26
     ed4:	a9 f3       	breq	.-22     	; 0xec0 <__divsf3_pse+0x10>
     ed6:	33 d0       	rcall	.+102    	; 0xf3e <__divsf3_pse+0x8e>
     ed8:	0e 2e       	mov	r0, r30
     eda:	3a f0       	brmi	.+14     	; 0xeea <__divsf3_pse+0x3a>
     edc:	e0 e8       	ldi	r30, 0x80	; 128
     ede:	30 d0       	rcall	.+96     	; 0xf40 <__divsf3_pse+0x90>
     ee0:	91 50       	subi	r25, 0x01	; 1
     ee2:	50 40       	sbci	r21, 0x00	; 0
     ee4:	e6 95       	lsr	r30
     ee6:	00 1c       	adc	r0, r0
     ee8:	ca f7       	brpl	.-14     	; 0xedc <__divsf3_pse+0x2c>
     eea:	29 d0       	rcall	.+82     	; 0xf3e <__divsf3_pse+0x8e>
     eec:	fe 2f       	mov	r31, r30
     eee:	27 d0       	rcall	.+78     	; 0xf3e <__divsf3_pse+0x8e>
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	bb 1f       	adc	r27, r27
     ef8:	26 17       	cp	r18, r22
     efa:	37 07       	cpc	r19, r23
     efc:	48 07       	cpc	r20, r24
     efe:	ab 07       	cpc	r26, r27
     f00:	b0 e8       	ldi	r27, 0x80	; 128
     f02:	09 f0       	breq	.+2      	; 0xf06 <__divsf3_pse+0x56>
     f04:	bb 0b       	sbc	r27, r27
     f06:	80 2d       	mov	r24, r0
     f08:	bf 01       	movw	r22, r30
     f0a:	ff 27       	eor	r31, r31
     f0c:	93 58       	subi	r25, 0x83	; 131
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	2a f0       	brmi	.+10     	; 0xf1c <__divsf3_pse+0x6c>
     f12:	9e 3f       	cpi	r25, 0xFE	; 254
     f14:	51 05       	cpc	r21, r1
     f16:	68 f0       	brcs	.+26     	; 0xf32 <__divsf3_pse+0x82>
     f18:	b6 c0       	rjmp	.+364    	; 0x1086 <__fp_inf>
     f1a:	00 c1       	rjmp	.+512    	; 0x111c <__fp_szero>
     f1c:	5f 3f       	cpi	r21, 0xFF	; 255
     f1e:	ec f3       	brlt	.-6      	; 0xf1a <__divsf3_pse+0x6a>
     f20:	98 3e       	cpi	r25, 0xE8	; 232
     f22:	dc f3       	brlt	.-10     	; 0xf1a <__divsf3_pse+0x6a>
     f24:	86 95       	lsr	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f7 95       	ror	r31
     f2e:	9f 5f       	subi	r25, 0xFF	; 255
     f30:	c9 f7       	brne	.-14     	; 0xf24 <__divsf3_pse+0x74>
     f32:	88 0f       	add	r24, r24
     f34:	91 1d       	adc	r25, r1
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	97 f9       	bld	r25, 7
     f3c:	08 95       	ret
     f3e:	e1 e0       	ldi	r30, 0x01	; 1
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	bb 1f       	adc	r27, r27
     f48:	62 17       	cp	r22, r18
     f4a:	73 07       	cpc	r23, r19
     f4c:	84 07       	cpc	r24, r20
     f4e:	ba 07       	cpc	r27, r26
     f50:	20 f0       	brcs	.+8      	; 0xf5a <__divsf3_pse+0xaa>
     f52:	62 1b       	sub	r22, r18
     f54:	73 0b       	sbc	r23, r19
     f56:	84 0b       	sbc	r24, r20
     f58:	ba 0b       	sbc	r27, r26
     f5a:	ee 1f       	adc	r30, r30
     f5c:	88 f7       	brcc	.-30     	; 0xf40 <__divsf3_pse+0x90>
     f5e:	e0 95       	com	r30
     f60:	08 95       	ret

00000f62 <__fixsfsi>:
     f62:	04 d0       	rcall	.+8      	; 0xf6c <__fixunssfsi>
     f64:	68 94       	set
     f66:	b1 11       	cpse	r27, r1
     f68:	d9 c0       	rjmp	.+434    	; 0x111c <__fp_szero>
     f6a:	08 95       	ret

00000f6c <__fixunssfsi>:
     f6c:	bc d0       	rcall	.+376    	; 0x10e6 <__fp_splitA>
     f6e:	88 f0       	brcs	.+34     	; 0xf92 <__fixunssfsi+0x26>
     f70:	9f 57       	subi	r25, 0x7F	; 127
     f72:	90 f0       	brcs	.+36     	; 0xf98 <__fixunssfsi+0x2c>
     f74:	b9 2f       	mov	r27, r25
     f76:	99 27       	eor	r25, r25
     f78:	b7 51       	subi	r27, 0x17	; 23
     f7a:	a0 f0       	brcs	.+40     	; 0xfa4 <__fixunssfsi+0x38>
     f7c:	d1 f0       	breq	.+52     	; 0xfb2 <__fixunssfsi+0x46>
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	1a f0       	brmi	.+6      	; 0xf8e <__fixunssfsi+0x22>
     f88:	ba 95       	dec	r27
     f8a:	c9 f7       	brne	.-14     	; 0xf7e <__fixunssfsi+0x12>
     f8c:	12 c0       	rjmp	.+36     	; 0xfb2 <__fixunssfsi+0x46>
     f8e:	b1 30       	cpi	r27, 0x01	; 1
     f90:	81 f0       	breq	.+32     	; 0xfb2 <__fixunssfsi+0x46>
     f92:	c3 d0       	rcall	.+390    	; 0x111a <__fp_zero>
     f94:	b1 e0       	ldi	r27, 0x01	; 1
     f96:	08 95       	ret
     f98:	c0 c0       	rjmp	.+384    	; 0x111a <__fp_zero>
     f9a:	67 2f       	mov	r22, r23
     f9c:	78 2f       	mov	r23, r24
     f9e:	88 27       	eor	r24, r24
     fa0:	b8 5f       	subi	r27, 0xF8	; 248
     fa2:	39 f0       	breq	.+14     	; 0xfb2 <__fixunssfsi+0x46>
     fa4:	b9 3f       	cpi	r27, 0xF9	; 249
     fa6:	cc f3       	brlt	.-14     	; 0xf9a <__fixunssfsi+0x2e>
     fa8:	86 95       	lsr	r24
     faa:	77 95       	ror	r23
     fac:	67 95       	ror	r22
     fae:	b3 95       	inc	r27
     fb0:	d9 f7       	brne	.-10     	; 0xfa8 <__fixunssfsi+0x3c>
     fb2:	3e f4       	brtc	.+14     	; 0xfc2 <__fixunssfsi+0x56>
     fb4:	90 95       	com	r25
     fb6:	80 95       	com	r24
     fb8:	70 95       	com	r23
     fba:	61 95       	neg	r22
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	8f 4f       	sbci	r24, 0xFF	; 255
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	08 95       	ret

00000fc4 <__floatunsisf>:
     fc4:	e8 94       	clt
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <__floatsisf+0x12>

00000fc8 <__floatsisf>:
     fc8:	97 fb       	bst	r25, 7
     fca:	3e f4       	brtc	.+14     	; 0xfda <__floatsisf+0x12>
     fcc:	90 95       	com	r25
     fce:	80 95       	com	r24
     fd0:	70 95       	com	r23
     fd2:	61 95       	neg	r22
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	99 23       	and	r25, r25
     fdc:	a9 f0       	breq	.+42     	; 0x1008 <__floatsisf+0x40>
     fde:	f9 2f       	mov	r31, r25
     fe0:	96 e9       	ldi	r25, 0x96	; 150
     fe2:	bb 27       	eor	r27, r27
     fe4:	93 95       	inc	r25
     fe6:	f6 95       	lsr	r31
     fe8:	87 95       	ror	r24
     fea:	77 95       	ror	r23
     fec:	67 95       	ror	r22
     fee:	b7 95       	ror	r27
     ff0:	f1 11       	cpse	r31, r1
     ff2:	f8 cf       	rjmp	.-16     	; 0xfe4 <__floatsisf+0x1c>
     ff4:	fa f4       	brpl	.+62     	; 0x1034 <__floatsisf+0x6c>
     ff6:	bb 0f       	add	r27, r27
     ff8:	11 f4       	brne	.+4      	; 0xffe <__floatsisf+0x36>
     ffa:	60 ff       	sbrs	r22, 0
     ffc:	1b c0       	rjmp	.+54     	; 0x1034 <__floatsisf+0x6c>
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	16 c0       	rjmp	.+44     	; 0x1034 <__floatsisf+0x6c>
    1008:	88 23       	and	r24, r24
    100a:	11 f0       	breq	.+4      	; 0x1010 <__floatsisf+0x48>
    100c:	96 e9       	ldi	r25, 0x96	; 150
    100e:	11 c0       	rjmp	.+34     	; 0x1032 <__floatsisf+0x6a>
    1010:	77 23       	and	r23, r23
    1012:	21 f0       	breq	.+8      	; 0x101c <__floatsisf+0x54>
    1014:	9e e8       	ldi	r25, 0x8E	; 142
    1016:	87 2f       	mov	r24, r23
    1018:	76 2f       	mov	r23, r22
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <__floatsisf+0x5e>
    101c:	66 23       	and	r22, r22
    101e:	71 f0       	breq	.+28     	; 0x103c <__floatsisf+0x74>
    1020:	96 e8       	ldi	r25, 0x86	; 134
    1022:	86 2f       	mov	r24, r22
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	2a f0       	brmi	.+10     	; 0x1034 <__floatsisf+0x6c>
    102a:	9a 95       	dec	r25
    102c:	66 0f       	add	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	88 1f       	adc	r24, r24
    1032:	da f7       	brpl	.-10     	; 0x102a <__floatsisf+0x62>
    1034:	88 0f       	add	r24, r24
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	97 f9       	bld	r25, 7
    103c:	08 95       	ret

0000103e <__fp_cmp>:
    103e:	99 0f       	add	r25, r25
    1040:	00 08       	sbc	r0, r0
    1042:	55 0f       	add	r21, r21
    1044:	aa 0b       	sbc	r26, r26
    1046:	e0 e8       	ldi	r30, 0x80	; 128
    1048:	fe ef       	ldi	r31, 0xFE	; 254
    104a:	16 16       	cp	r1, r22
    104c:	17 06       	cpc	r1, r23
    104e:	e8 07       	cpc	r30, r24
    1050:	f9 07       	cpc	r31, r25
    1052:	c0 f0       	brcs	.+48     	; 0x1084 <__fp_cmp+0x46>
    1054:	12 16       	cp	r1, r18
    1056:	13 06       	cpc	r1, r19
    1058:	e4 07       	cpc	r30, r20
    105a:	f5 07       	cpc	r31, r21
    105c:	98 f0       	brcs	.+38     	; 0x1084 <__fp_cmp+0x46>
    105e:	62 1b       	sub	r22, r18
    1060:	73 0b       	sbc	r23, r19
    1062:	84 0b       	sbc	r24, r20
    1064:	95 0b       	sbc	r25, r21
    1066:	39 f4       	brne	.+14     	; 0x1076 <__fp_cmp+0x38>
    1068:	0a 26       	eor	r0, r26
    106a:	61 f0       	breq	.+24     	; 0x1084 <__fp_cmp+0x46>
    106c:	23 2b       	or	r18, r19
    106e:	24 2b       	or	r18, r20
    1070:	25 2b       	or	r18, r21
    1072:	21 f4       	brne	.+8      	; 0x107c <__fp_cmp+0x3e>
    1074:	08 95       	ret
    1076:	0a 26       	eor	r0, r26
    1078:	09 f4       	brne	.+2      	; 0x107c <__fp_cmp+0x3e>
    107a:	a1 40       	sbci	r26, 0x01	; 1
    107c:	a6 95       	lsr	r26
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	81 1d       	adc	r24, r1
    1082:	81 1d       	adc	r24, r1
    1084:	08 95       	ret

00001086 <__fp_inf>:
    1086:	97 f9       	bld	r25, 7
    1088:	9f 67       	ori	r25, 0x7F	; 127
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	08 95       	ret

00001092 <__fp_nan>:
    1092:	9f ef       	ldi	r25, 0xFF	; 255
    1094:	80 ec       	ldi	r24, 0xC0	; 192
    1096:	08 95       	ret

00001098 <__fp_pscA>:
    1098:	00 24       	eor	r0, r0
    109a:	0a 94       	dec	r0
    109c:	16 16       	cp	r1, r22
    109e:	17 06       	cpc	r1, r23
    10a0:	18 06       	cpc	r1, r24
    10a2:	09 06       	cpc	r0, r25
    10a4:	08 95       	ret

000010a6 <__fp_pscB>:
    10a6:	00 24       	eor	r0, r0
    10a8:	0a 94       	dec	r0
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	14 06       	cpc	r1, r20
    10b0:	05 06       	cpc	r0, r21
    10b2:	08 95       	ret

000010b4 <__fp_round>:
    10b4:	09 2e       	mov	r0, r25
    10b6:	03 94       	inc	r0
    10b8:	00 0c       	add	r0, r0
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__fp_round+0xc>
    10bc:	88 23       	and	r24, r24
    10be:	52 f0       	brmi	.+20     	; 0x10d4 <__fp_round+0x20>
    10c0:	bb 0f       	add	r27, r27
    10c2:	40 f4       	brcc	.+16     	; 0x10d4 <__fp_round+0x20>
    10c4:	bf 2b       	or	r27, r31
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__fp_round+0x18>
    10c8:	60 ff       	sbrs	r22, 0
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <__fp_round+0x20>
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8f 4f       	sbci	r24, 0xFF	; 255
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	08 95       	ret

000010d6 <__fp_split3>:
    10d6:	57 fd       	sbrc	r21, 7
    10d8:	90 58       	subi	r25, 0x80	; 128
    10da:	44 0f       	add	r20, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	59 f0       	breq	.+22     	; 0x10f6 <__fp_splitA+0x10>
    10e0:	5f 3f       	cpi	r21, 0xFF	; 255
    10e2:	71 f0       	breq	.+28     	; 0x1100 <__fp_splitA+0x1a>
    10e4:	47 95       	ror	r20

000010e6 <__fp_splitA>:
    10e6:	88 0f       	add	r24, r24
    10e8:	97 fb       	bst	r25, 7
    10ea:	99 1f       	adc	r25, r25
    10ec:	61 f0       	breq	.+24     	; 0x1106 <__fp_splitA+0x20>
    10ee:	9f 3f       	cpi	r25, 0xFF	; 255
    10f0:	79 f0       	breq	.+30     	; 0x1110 <__fp_splitA+0x2a>
    10f2:	87 95       	ror	r24
    10f4:	08 95       	ret
    10f6:	12 16       	cp	r1, r18
    10f8:	13 06       	cpc	r1, r19
    10fa:	14 06       	cpc	r1, r20
    10fc:	55 1f       	adc	r21, r21
    10fe:	f2 cf       	rjmp	.-28     	; 0x10e4 <__fp_split3+0xe>
    1100:	46 95       	lsr	r20
    1102:	f1 df       	rcall	.-30     	; 0x10e6 <__fp_splitA>
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <__fp_splitA+0x30>
    1106:	16 16       	cp	r1, r22
    1108:	17 06       	cpc	r1, r23
    110a:	18 06       	cpc	r1, r24
    110c:	99 1f       	adc	r25, r25
    110e:	f1 cf       	rjmp	.-30     	; 0x10f2 <__fp_splitA+0xc>
    1110:	86 95       	lsr	r24
    1112:	71 05       	cpc	r23, r1
    1114:	61 05       	cpc	r22, r1
    1116:	08 94       	sec
    1118:	08 95       	ret

0000111a <__fp_zero>:
    111a:	e8 94       	clt

0000111c <__fp_szero>:
    111c:	bb 27       	eor	r27, r27
    111e:	66 27       	eor	r22, r22
    1120:	77 27       	eor	r23, r23
    1122:	cb 01       	movw	r24, r22
    1124:	97 f9       	bld	r25, 7
    1126:	08 95       	ret

00001128 <__gesf2>:
    1128:	8a df       	rcall	.-236    	; 0x103e <__fp_cmp>
    112a:	08 f4       	brcc	.+2      	; 0x112e <__gesf2+0x6>
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	08 95       	ret

00001130 <__mulsf3>:
    1130:	0b d0       	rcall	.+22     	; 0x1148 <__mulsf3x>
    1132:	c0 cf       	rjmp	.-128    	; 0x10b4 <__fp_round>
    1134:	b1 df       	rcall	.-158    	; 0x1098 <__fp_pscA>
    1136:	28 f0       	brcs	.+10     	; 0x1142 <__mulsf3+0x12>
    1138:	b6 df       	rcall	.-148    	; 0x10a6 <__fp_pscB>
    113a:	18 f0       	brcs	.+6      	; 0x1142 <__mulsf3+0x12>
    113c:	95 23       	and	r25, r21
    113e:	09 f0       	breq	.+2      	; 0x1142 <__mulsf3+0x12>
    1140:	a2 cf       	rjmp	.-188    	; 0x1086 <__fp_inf>
    1142:	a7 cf       	rjmp	.-178    	; 0x1092 <__fp_nan>
    1144:	11 24       	eor	r1, r1
    1146:	ea cf       	rjmp	.-44     	; 0x111c <__fp_szero>

00001148 <__mulsf3x>:
    1148:	c6 df       	rcall	.-116    	; 0x10d6 <__fp_split3>
    114a:	a0 f3       	brcs	.-24     	; 0x1134 <__mulsf3+0x4>

0000114c <__mulsf3_pse>:
    114c:	95 9f       	mul	r25, r21
    114e:	d1 f3       	breq	.-12     	; 0x1144 <__mulsf3+0x14>
    1150:	95 0f       	add	r25, r21
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	55 1f       	adc	r21, r21
    1156:	62 9f       	mul	r22, r18
    1158:	f0 01       	movw	r30, r0
    115a:	72 9f       	mul	r23, r18
    115c:	bb 27       	eor	r27, r27
    115e:	f0 0d       	add	r31, r0
    1160:	b1 1d       	adc	r27, r1
    1162:	63 9f       	mul	r22, r19
    1164:	aa 27       	eor	r26, r26
    1166:	f0 0d       	add	r31, r0
    1168:	b1 1d       	adc	r27, r1
    116a:	aa 1f       	adc	r26, r26
    116c:	64 9f       	mul	r22, r20
    116e:	66 27       	eor	r22, r22
    1170:	b0 0d       	add	r27, r0
    1172:	a1 1d       	adc	r26, r1
    1174:	66 1f       	adc	r22, r22
    1176:	82 9f       	mul	r24, r18
    1178:	22 27       	eor	r18, r18
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	62 1f       	adc	r22, r18
    1180:	73 9f       	mul	r23, r19
    1182:	b0 0d       	add	r27, r0
    1184:	a1 1d       	adc	r26, r1
    1186:	62 1f       	adc	r22, r18
    1188:	83 9f       	mul	r24, r19
    118a:	a0 0d       	add	r26, r0
    118c:	61 1d       	adc	r22, r1
    118e:	22 1f       	adc	r18, r18
    1190:	74 9f       	mul	r23, r20
    1192:	33 27       	eor	r19, r19
    1194:	a0 0d       	add	r26, r0
    1196:	61 1d       	adc	r22, r1
    1198:	23 1f       	adc	r18, r19
    119a:	84 9f       	mul	r24, r20
    119c:	60 0d       	add	r22, r0
    119e:	21 1d       	adc	r18, r1
    11a0:	82 2f       	mov	r24, r18
    11a2:	76 2f       	mov	r23, r22
    11a4:	6a 2f       	mov	r22, r26
    11a6:	11 24       	eor	r1, r1
    11a8:	9f 57       	subi	r25, 0x7F	; 127
    11aa:	50 40       	sbci	r21, 0x00	; 0
    11ac:	8a f0       	brmi	.+34     	; 0x11d0 <__mulsf3_pse+0x84>
    11ae:	e1 f0       	breq	.+56     	; 0x11e8 <__mulsf3_pse+0x9c>
    11b0:	88 23       	and	r24, r24
    11b2:	4a f0       	brmi	.+18     	; 0x11c6 <__mulsf3_pse+0x7a>
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	bb 1f       	adc	r27, r27
    11ba:	66 1f       	adc	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	91 50       	subi	r25, 0x01	; 1
    11c2:	50 40       	sbci	r21, 0x00	; 0
    11c4:	a9 f7       	brne	.-22     	; 0x11b0 <__mulsf3_pse+0x64>
    11c6:	9e 3f       	cpi	r25, 0xFE	; 254
    11c8:	51 05       	cpc	r21, r1
    11ca:	70 f0       	brcs	.+28     	; 0x11e8 <__mulsf3_pse+0x9c>
    11cc:	5c cf       	rjmp	.-328    	; 0x1086 <__fp_inf>
    11ce:	a6 cf       	rjmp	.-180    	; 0x111c <__fp_szero>
    11d0:	5f 3f       	cpi	r21, 0xFF	; 255
    11d2:	ec f3       	brlt	.-6      	; 0x11ce <__mulsf3_pse+0x82>
    11d4:	98 3e       	cpi	r25, 0xE8	; 232
    11d6:	dc f3       	brlt	.-10     	; 0x11ce <__mulsf3_pse+0x82>
    11d8:	86 95       	lsr	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	f7 95       	ror	r31
    11e2:	e7 95       	ror	r30
    11e4:	9f 5f       	subi	r25, 0xFF	; 255
    11e6:	c1 f7       	brne	.-16     	; 0x11d8 <__mulsf3_pse+0x8c>
    11e8:	fe 2b       	or	r31, r30
    11ea:	88 0f       	add	r24, r24
    11ec:	91 1d       	adc	r25, r1
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	97 f9       	bld	r25, 7
    11f4:	08 95       	ret

000011f6 <__divmodhi4>:
    11f6:	97 fb       	bst	r25, 7
    11f8:	09 2e       	mov	r0, r25
    11fa:	07 26       	eor	r0, r23
    11fc:	0a d0       	rcall	.+20     	; 0x1212 <__divmodhi4_neg1>
    11fe:	77 fd       	sbrc	r23, 7
    1200:	04 d0       	rcall	.+8      	; 0x120a <__divmodhi4_neg2>
    1202:	0c d0       	rcall	.+24     	; 0x121c <__udivmodhi4>
    1204:	06 d0       	rcall	.+12     	; 0x1212 <__divmodhi4_neg1>
    1206:	00 20       	and	r0, r0
    1208:	1a f4       	brpl	.+6      	; 0x1210 <__divmodhi4_exit>

0000120a <__divmodhi4_neg2>:
    120a:	70 95       	com	r23
    120c:	61 95       	neg	r22
    120e:	7f 4f       	sbci	r23, 0xFF	; 255

00001210 <__divmodhi4_exit>:
    1210:	08 95       	ret

00001212 <__divmodhi4_neg1>:
    1212:	f6 f7       	brtc	.-4      	; 0x1210 <__divmodhi4_exit>
    1214:	90 95       	com	r25
    1216:	81 95       	neg	r24
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	08 95       	ret

0000121c <__udivmodhi4>:
    121c:	aa 1b       	sub	r26, r26
    121e:	bb 1b       	sub	r27, r27
    1220:	51 e1       	ldi	r21, 0x11	; 17
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <__udivmodhi4_ep>

00001224 <__udivmodhi4_loop>:
    1224:	aa 1f       	adc	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	a6 17       	cp	r26, r22
    122a:	b7 07       	cpc	r27, r23
    122c:	10 f0       	brcs	.+4      	; 0x1232 <__udivmodhi4_ep>
    122e:	a6 1b       	sub	r26, r22
    1230:	b7 0b       	sbc	r27, r23

00001232 <__udivmodhi4_ep>:
    1232:	88 1f       	adc	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	5a 95       	dec	r21
    1238:	a9 f7       	brne	.-22     	; 0x1224 <__udivmodhi4_loop>
    123a:	80 95       	com	r24
    123c:	90 95       	com	r25
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	08 95       	ret

00001244 <_exit>:
    1244:	f8 94       	cli

00001246 <__stop_program>:
    1246:	ff cf       	rjmp	.-2      	; 0x1246 <__stop_program>
